// 
// ProjectSelector.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "ProjectSelector.h"
#import "Projects.h"
#import "People.h"

@implementation ProjectSelector

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"ProjectSelector"];
    previousLengthOfProjectsSearchString = 0;
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  [projectsArray release];
  [project release];
  [person release];
  [projectInfoViewer release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)windowDidLoad {
   [super windowDidLoad];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForModal {
   [super setupForModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForNonModal {
   [super setupForNonModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)runModalWithParent:(NSWindow *) parent {
   [super runModalWithParent:parent];
}


//******************************************************************************
// setup
//******************************************************************************

- (void)setupButtons {
  // nothing to be done
}

//******************************************************************************

- (void)setupTextFields {
  [self clearTextField:projectsSearchField];
}

//******************************************************************************

- (void)setupTables {
  [self setProjectsArray:[self projectsForContext]];
  //NSLog(@"projectsArray: %@", projectsArray);
  [projectsTableView setTarget:self];
  [projectsTableView setDoubleAction:@selector(handleProjectsClicked:)];
  [projectsTableView reloadData];
}

//******************************************************************************

- (void)setupStateVariables {
  [self setProject:nil];
  //don't do this.
  //[self setPerson:nil];
}


//******************************************************************************
// button actions
//******************************************************************************

- (IBAction)cancelButtonClicked:(id)sender {
    //NSLog(@"cancelButton clicked");
  [self setPerson:nil];
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}


//******************************************************************************
// misc
//******************************************************************************
- (NSMutableArray *)projectsForContext {
  NSMutableArray *array;
  NSPredicate *pred = [NSPredicate predicateWithFormat:@"isFinished == NO"];
  //NSLog(@"person: %@", person);
  if ([self person] != nil) {
    array = [[Projects sharedInstance] objectsForUids:[person projectUids]];
    
  } else {
    array = [[Projects sharedInstance] arrayForDictionary];
  }
  [array filterUsingPredicate:pred];
  //NSLog(@"array: %@", array);
  return array;
}

//******************************************************************************
// handlers
//******************************************************************************


- (void) handleProjectsSearchFieldChange:(NSNotification *)note {
  if ([[self window] isKeyWindow] && [note object] == projectsSearchField) {
    NSString *searchString = [[[note object] stringValue] lowercaseString];
    NSString *bikeString, *lastString, *startString, *endString, *finishedString, *nameString, *emailString, *phoneString, *overdueString, *theNoteString, *theQuoteString, *theBalanceString;
    id object;
    // revert to whole list of objects
    if ( [searchString length] == 0 ) {
      [self setProjectsArray:[self projectsForContext]];
      previousLengthOfProjectsSearchString = 0;
      [projectsTableView reloadData];
      return;
    }
    
    // this will hold our filtered list
    NSMutableArray *filteredObjects = [[NSMutableArray alloc] init];
    // if we back up, research the entire list
    if (previousLengthOfProjectsSearchString > [searchString length]) {
      [self setProjectsArray:[self projectsForContext]];
    }
    
    // this needs to be exactly here, otherwise we won't iterate over the correct
    // set of objects
    NSEnumerator *e = [projectsArray objectEnumerator];
    while (object = [e nextObject] ) {
      bikeString = [[object bicycleDescription] lowercaseString];
      NSRange bikeRange = [bikeString rangeOfString:searchString options:NSLiteralSearch];
      lastString = [[[object dateLastWorked]  descriptionWithCalendarFormat:@"%m/%d/%Y"] lowercaseString];
      NSRange lastRange = [lastString rangeOfString:searchString options:NSLiteralSearch];
      startString = [[[object startDate]  descriptionWithCalendarFormat:@"%m/%d/%Y"] lowercaseString];
      NSRange startRange = [startString rangeOfString:searchString options:NSLiteralSearch];
      endString = [[[object finishedDate]  descriptionWithCalendarFormat:@"%m/%d/%Y"] lowercaseString];
      NSRange endRange = [endString rangeOfString:searchString options:NSLiteralSearch];
      finishedString = [[object finishedYesOrNo] lowercaseString];
      NSRange finishedRange = [finishedString rangeOfString:searchString options:NSLiteralSearch];
      nameString = [[object ownerName] lowercaseString];
      NSRange nameRange = [nameString rangeOfString:searchString options:NSLiteralSearch];
      emailString = [[object ownerEmail] lowercaseString];
      NSRange emailRange = [emailString rangeOfString:searchString options:NSLiteralSearch];
      phoneString = [[object ownerPhone] lowercaseString];
      NSRange phoneRange = [phoneString rangeOfString:searchString options:NSLiteralSearch];
      overdueString = [[object isOverdueYesOrNo] lowercaseString];
      NSRange overdueRange = [overdueString rangeOfString:searchString options:NSLiteralSearch];
      theNoteString = [[object note] lowercaseString];
      NSRange theNoteRange = [theNoteString rangeOfString:searchString options:NSLiteralSearch];
      theQuoteString = [NSString stringWithFormat:@"%1.2f", [object quote]];
      NSRange theQuoteRange = [theQuoteString rangeOfString:searchString options:NSLiteralSearch];
      theBalanceString = [NSString stringWithFormat:@"%1.2f", [object balance]];
      NSRange theBalanceRange = [theBalanceString rangeOfString:searchString options:NSLiteralSearch];
      
      if (((bikeRange.length) > 0) || ((lastRange.length) > 0) || ((startRange.length) > 0) || ((endRange.length) > 0) || ((finishedRange.length) > 0) || ((nameRange.length) > 0) || ((emailRange.length) > 0) || ((phoneRange.length) > 0) || ((overdueRange.length) > 0) || ((theNoteRange.length) > 0) || ((theQuoteRange.length) > 0) || ((theBalanceRange.length) > 0)) {
        [filteredObjects addObject:object];
      }
    }
    [self setProjectsArray:filteredObjects];
    [projectsTableView reloadData];
    previousLengthOfProjectsSearchString = [searchString length];
    [filteredObjects release];
  }
}

//******************************************************************************

- (void)handleProjectsChange:(NSNotification *)note {
  NSArray *tmp = [[Projects sharedInstance] arrayForDictionary];
  [self setProjectsArray:tmp];
  [projectsTableView reloadData];
}

//******************************************************************************

- (void)handleProjectsClicked:(id)sender {
  if ([self person] == nil) {
    // running in update mode
    NSArray *selected = [projectsArrayController selectedObjects];
    if ([selected count] > 0) {
      Project *tmp = (Project *)[selected objectAtIndex:0];
      if (tmp != nil) {
        if (projectInfoViewer == nil) {
          ProjectInformationController *pic = [[ProjectInformationController alloc] init];
          [self setProjectInfoViewer:pic];
          [pic release];
        }
        [projectInfoViewer setProject:tmp];
        [projectInfoViewer setupForModal];
        [projectInfoViewer runModalWithParent:[self window]];
      }
    }
  } else {
    NSArray *selected = [projectsArrayController selectedObjects];
    if ([selected count] > 0) {
      Project *tmp = (Project *)[selected objectAtIndex:0];
      if (tmp != nil) {
        [self setProject:tmp];
        if (runningModal) {
          [self stopModalAndCloseWindow];
        } else {
          [[self window] close];
        }
      }
    }
  }
}

//******************************************************************************
// accessors and setters
//******************************************************************************

- (NSMutableArray *)projectsArray {
  return projectsArray;
}
- (void) setProjectsArray:(NSArray *)arg {
  if (arg != projectsArray) {
    [projectsArray release];
    projectsArray = [arg mutableCopy];
  }
}
- (Project *)project {
  return project;
}
- (void) setProject:(Project *)arg {
  [arg retain];
  [project release];
  project = arg;
}
- (Person *)person {
  return person;
}
- (void) setPerson:(Person *)arg {
  [arg retain];
  [person release];
  person = arg;
}

- (ProjectInformationController *)projectInfoViewer {
  return projectInfoViewer;
}
- (void)setProjectInfoViewer:(ProjectInformationController *)arg {
  [arg retain];
  [projectInfoViewer release];
  projectInfoViewer = arg;
}


//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
     NSNotificationCenter *nc;
     nc = [NSNotificationCenter defaultCenter];

    [nc addObserver:self
    selector:@selector(handleProjectsSearchFieldChange:)
    name:NSControlTextDidChangeNotification
    object:projectsSearchField];

    [nc addObserver:self
    selector:@selector(handleProjectsChange:)
    name:[[Projects sharedInstance] notificationChangeString]
    object:nil];

}
@end