// 
// PersonSelector.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "PersonSelector.h"
#import "People.h"

@implementation PersonSelector

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"PersonSelector"];
    previousLengthOfPeopleSearchString = 0;
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  [person release];
  [peopleArray release];
  [createCustomerController release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)windowDidLoad {
   [super windowDidLoad];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForModal {
   [super setupForModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForNonModal {
   [super setupForNonModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)runModalWithParent:(NSWindow *) parent {
   [super runModalWithParent:parent];
}


//******************************************************************************
// setup
//******************************************************************************

- (void)setupButtons {
  // possibly enable/disable quick sale button
}

//******************************************************************************

- (void)setupTextFields {
  [selectedPersonTextField setStringValue:@"No client selected."];
  [self clearTextField:peopleSearchField];
}

//******************************************************************************

- (void)setupTables {
  [self setPeopleArray:[[People sharedInstance] arrayForDictionary]];
  [peopleTableView setTarget:self];
  [peopleTableView setDoubleAction:@selector(handlePeopleClicked:)];
  [peopleTableView setAction:@selector(handlePeopleSingleClicked:)];
}

//******************************************************************************

- (void)setupStateVariables {
  [self setPerson:nil];
}


//******************************************************************************
// button actions
//******************************************************************************

- (IBAction)quickSaleButtonClicked:(id)sender {
  //NSLog(@"quickSaleButton clicked");
  Person *p = [[People sharedInstance] personForName:@"quick sale"];
  [self setPerson:p];
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}

//******************************************************************************

- (IBAction)addNewButtonClicked:(id)sender {
  //NSLog(@"addNewButton clicked");
  if (createCustomerController == nil) {
    CreateCustomerController *ccc = [[CreateCustomerController alloc] init];
    [self setCreateCustomerController:ccc];
    [ccc release];
  }
  [createCustomerController setMainWindow:[self window]];
  [createCustomerController setPeopleArrayController:peopleArrayController];
  [createCustomerController setBypassDuplicatePerson:NO];
  [createCustomerController runCreateCustomerModal];
  // well?
  Person *p = [[peopleArrayController selectedObjects] objectAtIndex:0];
  if (p != nil) {
    [self setPerson:p];
    [selectedPersonTextField setStringValue:[person personName]];
    if (runningModal) {
      [self stopModalAndCloseWindow];
    } else {
      [[self window] close];
    }
  }
}

//******************************************************************************

- (IBAction)cancelButtonClicked:(id)sender {
    //NSLog(@"cancelButton clicked");
  [self setPerson:nil];
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}

//******************************************************************************



//******************************************************************************
// misc
//******************************************************************************




//******************************************************************************
// handlers
//******************************************************************************


- (void) handlePeopleSearchFieldChange:(NSNotification *)note {
  if ([[self window] isKeyWindow] && [note object] == peopleSearchField) {
    NSString *searchString = [[[note object] stringValue] lowercaseString];
    NSString *nameString, *phoneString, *emailString, *addString, *ctString, *zString, *theStateString, *memberString;
    id object;
    // revert to whole list of objects
    if ( [searchString length] == 0 ) {
      [self setPeopleArray:[[People sharedInstance] arrayForDictionary]];
      previousLengthOfPeopleSearchString = 0;
      [peopleTableView reloadData];
      return;
    }
    
    // this will hold our filtered list
    NSMutableArray *filteredObjects = [[NSMutableArray alloc] init];
    // if we back up, research the entire list
    if (previousLengthOfPeopleSearchString > [searchString length]) {
      [self setPeopleArray:[[People sharedInstance] arrayForDictionary]];
    }
    
    // this needs to be exactly here, otherwise we won't iterate over the correct
    // set of objects
    NSEnumerator *e = [peopleArray objectEnumerator];
    while (object = [e nextObject] ) {
      nameString = [[object personName] lowercaseString];
      NSRange nameRange = [nameString rangeOfString:searchString options:NSLiteralSearch];
      phoneString = [[object phoneNumber] lowercaseString];
      NSRange phoneRange = [phoneString rangeOfString:searchString options:NSLiteralSearch];
      emailString = [[object emailAddress] lowercaseString];
      NSRange emailRange = [emailString rangeOfString:searchString options:NSLiteralSearch];
      addString = [[object address] lowercaseString];
      NSRange addRange = [addString rangeOfString:searchString options:NSLiteralSearch];
      ctString = [[object city] lowercaseString];
      NSRange ctRange = [ctString rangeOfString:searchString options:NSLiteralSearch];
      zString = [[object zip] lowercaseString];
      NSRange zRange = [zString rangeOfString:searchString options:NSLiteralSearch];
      theStateString = [[object addressState] lowercaseString];
      NSRange theStateRange = [theStateString rangeOfString:searchString options:NSLiteralSearch];
      memberString = [[object memberType] lowercaseString];
      NSRange memberRange = [memberString rangeOfString:searchString options:NSLiteralSearch];
      
      if (((nameRange.length) > 0) || ((phoneRange.length) > 0) || ((emailRange.length) > 0) || ((addRange.length) > 0) || ((ctRange.length) > 0) || ((zRange.length) > 0) || ((theStateRange.length) > 0) || ((memberRange.length) > 0)) {
        [filteredObjects addObject:object];
      }
    }
    [self setPeopleArray:filteredObjects];
    [peopleTableView reloadData];
    previousLengthOfPeopleSearchString = [searchString length];
    [filteredObjects release];
  }
}

- (void)handlePeopleChange:(NSNotification *)note {
  NSArray *tmp = [[People sharedInstance] arrayForDictionary];
  [self setPeopleArray:tmp];
  [peopleTableView reloadData];
}

//******************************************************************************

- (void)handlePeopleClicked:(id)sender {
  NSArray *selected = [peopleArrayController selectedObjects];
  if ([selected count] > 0) {
    Person *tmp = [selected objectAtIndex:0];
    if (tmp != nil) {
      [selectedPersonTextField setStringValue:[tmp personName]];
      [self setPerson:tmp];
      if (runningModal) {
        [self stopModalAndCloseWindow];
      } else {
        [[self window] close];
      }
    }
  }
}

//******************************************************************************

- (void)handlePeopleSingleClicked:(id)sender {
  NSArray *selected = [peopleArrayController selectedObjects];
  if ([selected count] > 0) {
    Person *tmp = [selected objectAtIndex:0];
    if (tmp != nil) {
      [selectedPersonTextField setStringValue:[tmp personName]];
    }
  }
}


//******************************************************************************

- (void)handlePeopleTableViewSelectionChange:(NSNotification *)note {
  if ([note object] == peopleTableView) {
    [self handlePeopleSingleClicked:self];
  }
}

//******************************************************************************
// accessors and setters
//******************************************************************************

- (Person *)person {
  return person;
}
- (void) setPerson:(Person *)arg {
  [arg retain];
  [person release];
  person = arg;
}
- (NSMutableArray *)peopleArray {
  return peopleArray;
}
- (void) setPeopleArray:(NSArray *)arg {
  if (arg != peopleArray) {
    [peopleArray release];
    peopleArray = [arg mutableCopy];
  }
}
- (CreateCustomerController *)createCustomerController {
  return createCustomerController;
}
- (void) setCreateCustomerController:(CreateCustomerController *)arg {
  [arg retain];
  [createCustomerController release];
  createCustomerController = arg;
}



//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
     NSNotificationCenter *nc;
     nc = [NSNotificationCenter defaultCenter];

    [nc addObserver:self
    selector:@selector(handlePeopleSearchFieldChange:)
    name:NSControlTextDidChangeNotification
    object:peopleSearchField];

    [nc addObserver:self
    selector:@selector(handlePeopleChange:)
    name:[[People sharedInstance] notificationChangeString]
    object:nil];
    
    [nc addObserver:self
           selector:@selector(handlePeopleTableViewSelectionChange:)
               name:NSTableViewSelectionDidChangeNotification
             object:peopleTableView];
    

}
@end