// 
// Person.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "Person.h"
#import "Credits.h"
#import "Invoices.h"
#import "Project.h"
#import "Projects.h"
#import "Memberships.h"
#import "People.h"
#import "PersonClassDescription.h"

@implementation Person

+ (void) initialize {
  if ( self == [Person class] ) {
    id superDescription = [[self superclass] classDescription];
    NSArray *attributeKeys = [superDescription attributeKeys];
    NSDictionary *typeForKey = [superDescription typeForKey];
    NSMutableArray *superAttributes = [NSMutableArray arrayWithArray:attributeKeys];
    NSMutableDictionary *superTypes = [NSMutableDictionary dictionaryWithDictionary:typeForKey];
    PersonClassDescription *cd = [[PersonClassDescription alloc] init];
    [superAttributes addObjectsFromArray:[NSArray arrayWithObjects:@"personName",@"phoneNumber",@"emailAddress",@"companyName",@"address",@"city",@"addressState",@"zip",@"willTakeCheckFrom",@"hasSignedLiabilityWaiver",@"membershipUid",@"projectUids",@"commentUids",@"invoiceUids",@"creditUids",@"contactUids",@"cashDonationUids",@"inKindDonationUids",@"compUids",nil]];
    [superTypes setObject:LjStringType forKey:@"personName"];
    [superTypes setObject:LjStringType forKey:@"phoneNumber"];
    [superTypes setObject:LjStringType forKey:@"emailAddress"];
    [superTypes setObject:LjStringType forKey:@"companyName"];
    [superTypes setObject:LjStringType forKey:@"address"];
    [superTypes setObject:LjStringType forKey:@"city"];
    [superTypes setObject:LjStringType forKey:@"addressState"];
    [superTypes setObject:LjStringType forKey:@"zip"];
    [superTypes setObject:LjBooleanType forKey:@"willTakeCheckFrom"];
    [superTypes setObject:LjBooleanType forKey:@"hasSignedLiabilityWaiver"];
    [superTypes setObject:LjStringType forKey:@"membershipUid"];
    [superTypes setObject:LjArrayType forKey:@"projectUids"];
    [superTypes setObject:LjArrayType forKey:@"commentUids"];
    [superTypes setObject:LjArrayType forKey:@"invoiceUids"];
    [superTypes setObject:LjArrayType forKey:@"creditUids"];
    [superTypes setObject:LjArrayType forKey:@"contactUids"];
    [superTypes setObject:LjArrayType forKey:@"cashDonationUids"];
    [superTypes setObject:LjArrayType forKey:@"inKindDonationUids"];
    [superTypes setObject:LjArrayType forKey:@"compUids"];
    [cd setAttributeKeys:superAttributes];
    [cd setTypeForKey:superTypes];
    [NSClassDescription registerClassDescription:cd forClass:[self class]];
    [cd release];
  }
}

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setPersonName:@""];
    [self setPhoneNumber:@""];
    [self setEmailAddress:@""];
    [self setCompanyName:@""];
    [self setAddress:@""];
    [self setCity:@""];
    [self setAddressState:@""];
    [self setZip:@""];
    [self setWillTakeCheckFrom:YES];
    [self setHasSignedLiabilityWaiver:NO];
    [self setMembershipUid:@""];
    NSArray *puids = [[NSArray alloc] init];
    [self setProjectUids:puids];
    [puids release];
    NSArray *cuids = [[NSArray alloc] init];
    [self setCommentUids:cuids];
    [cuids release];
    NSArray *iuids = [[NSArray alloc] init];
    [self setInvoiceUids:iuids];
    [iuids release];
    NSArray *cruids = [[NSArray alloc] init];
    [self setCreditUids:cruids];
    [cruids release];
    NSArray *couids = [[NSArray alloc] init];
    [self setContactUids:couids];
    [couids release];
    NSArray *cduids = [[NSArray alloc] init];
    [self setCashDonationUids:cduids];
    [cduids release];
    NSArray *ikuids = [[NSArray alloc] init];
    [self setInKindDonationUids:ikuids];
    [ikuids release];
    NSArray *cmuids = [[NSArray alloc] init];
    [self setCompUids:cmuids];
    [cmuids release];

  }
  return self;
}


//******************************************************************************
// dealloc
//******************************************************************************
- (void) dealloc {
  [personName release];
  [phoneNumber release];
  [emailAddress release];
  [companyName release];
  [address release];
  [city release];
  [addressState release];
  [zip release];
  [membershipUid release];
  [projectUids release];
  [commentUids release];
  [invoiceUids release];
  [creditUids release];
  [contactUids release];
  [cashDonationUids release];
  [inKindDonationUids release];
  [compUids release];
  
  [super dealloc];
}

//******************************************************************************
// description
//******************************************************************************

- (NSString *)description {
  return [NSString stringWithFormat:@"<Person: %@ %@ phone %@ email %@ company %@ address %@ state %@ city %@ zip %@ member %@>", uid, personName,
    phoneNumber, emailAddress, companyName, address, addressState, city, zip, [self memberType]];
}


//******************************************************************************
// encode
//******************************************************************************
- (void)encodeWithCoder:(NSCoder *)coder {
  [super encodeWithCoder:coder];
  [coder encodeObject:personName forKey:@"personName"];
  [coder encodeObject:phoneNumber forKey:@"phoneNumber"];
  [coder encodeObject:emailAddress forKey:@"emailAddress"];
  [coder encodeObject:companyName forKey:@"companyName"];
  [coder encodeObject:address forKey:@"address"];
  [coder encodeObject:city forKey:@"city"];
  [coder encodeObject:addressState forKey:@"addressState"];
  [coder encodeObject:zip forKey:@"zip"];
  [coder encodeBool:willTakeCheckFrom forKey:@"willTakeCheckFrom"];
  [coder encodeBool:hasSignedLiabilityWaiver forKey:@"hasSignedLiabilityWaiver"];
  [coder encodeObject:membershipUid forKey:@"membershipUid"];
  [coder encodeObject:projectUids forKey:@"projectUids"];
  [coder encodeObject:commentUids forKey:@"commentUids"];
  [coder encodeObject:invoiceUids forKey:@"invoiceUids"];
  [coder encodeObject:creditUids forKey:@"creditUids"];
  [coder encodeObject:contactUids forKey:@"contactUids"];
  [coder encodeObject:cashDonationUids forKey:@"cashDonationUids"];
  [coder encodeObject:inKindDonationUids forKey:@"inKindDonationUids"];
  [coder encodeObject:compUids forKey:@"compUids"];
}


//******************************************************************************
// decode
//******************************************************************************
- (id)initWithCoder:(NSCoder *)coder {
  [super initWithCoder:coder];
  [self setPersonName:[coder decodeObjectForKey:@"personName"]];
  [self setPhoneNumber:[coder decodeObjectForKey:@"phoneNumber"]];
  [self setEmailAddress:[coder decodeObjectForKey:@"emailAddress"]];
  [self setCompanyName:[coder decodeObjectForKey:@"companyName"]];
  [self setAddress:[coder decodeObjectForKey:@"address"]];
  [self setCity:[coder decodeObjectForKey:@"city"]];
  [self setAddressState:[coder decodeObjectForKey:@"addressState"]];
  [self setZip:[coder decodeObjectForKey:@"zip"]];
  [self setWillTakeCheckFrom:[coder decodeBoolForKey:@"willTakeCheckFrom"]];
  [self setHasSignedLiabilityWaiver:[coder decodeBoolForKey:@"hasSignedLiabilityWaiver"]];
  [self setMembershipUid:[coder decodeObjectForKey:@"membershipUid"]];
  [self setProjectUids:[coder decodeObjectForKey:@"projectUids"]];
  [self setCommentUids:[coder decodeObjectForKey:@"commentUids"]];
  [self setInvoiceUids:[coder decodeObjectForKey:@"invoiceUids"]];
  [self setCreditUids:[coder decodeObjectForKey:@"creditUids"]];
  [self setContactUids:[coder decodeObjectForKey:@"contactUids"]];
  [self setCashDonationUids:[coder decodeObjectForKey:@"cashDonationUids"]];
  [self setInKindDonationUids:[coder decodeObjectForKey:@"inKindDonationUids"]];
  [self setCompUids:[coder decodeObjectForKey:@"compUids"]];
 return self;
}


//******************************************************************************
// methods
//******************************************************************************
- (Membership *)membership {
   return [[Memberships sharedInstance] objectForUid:membershipUid];
}

//******************************************************************************

- (bool)isMember {
  if ([[self memberType] isEqualToString:@"no"] ||
      [[self memberType] isEqualToString:@"expired"]) {
    return NO;
  } else {
    return YES; 
  }
}

//******************************************************************************

- (NSString *)memberType {
  return [[self membership] membershipType];
}

//******************************************************************************

- (NSCalendarDate *)membershipEndDate {
  return [[self membership] endDate];
}

//******************************************************************************

- (double)personBalance {
  NSArray *invoices = [[Invoices sharedInstance] objectsForUids:invoiceUids];
  unsigned int i, count = [invoices count];
  double sum = 0.0;
  for (i = 0; i < count; i++) {
    Invoice *invoice = (Invoice *)[invoices objectAtIndex:i];
    if (![invoice invoicePaid]) {
      sum = sum + [invoice invoiceTotal];
    }
  }
  return sum;
}

//******************************************************************************

- (double)creditAvailable {
  NSArray *credits = [[Credits sharedInstance] objectsForUids:creditUids];
  unsigned int i, count = [credits count];
  double sum = 0.0;
  for (i = 0; i < count; i++) {
    ShopCredit *credit = (ShopCredit *)[credits objectAtIndex:i];
    if (![credit hasBeenUsed]) {
      sum += [credit creditAmount];
    }
  }
  return sum;
}

//******************************************************************************

- (bool)hasAvailableCredit {
  if ([self creditAvailable] > 0.0) {
    return YES;
  } else {
    return NO;
  }
}

//******************************************************************************

- (NSArray *)unpaidInvoices {
  NSMutableArray *result = [[NSMutableArray alloc] init];
  unsigned int i, count = [invoiceUids count];
  for (i = 0; i < count; i++) {
    NSString *aUid = (NSString *)[invoiceUids objectAtIndex:i];
    Invoice *inv = (Invoice *) [[Invoices sharedInstance] objectForUid:aUid];
    if (![inv invoicePaid]) {
      [result addObject:result];
    }
  }
  NSArray *returnVal = [NSArray arrayWithArray:result];
  [result release];
  return returnVal;
}

//******************************************************************************

- (NSArray *)paidInvoices {
  NSMutableArray *result = [[NSMutableArray alloc] init];
  unsigned int i, count = [invoiceUids count];
  for (i = 0; i < count; i++) {
    NSString *aUid = (NSString *)[invoiceUids objectAtIndex:i];
    Invoice *inv = (Invoice *) [[Invoices sharedInstance] objectForUid:aUid];
    if ([inv invoicePaid]) {
      [result addObject:result];
    }
  }
  NSArray *returnVal = [NSArray arrayWithArray:result];
  [result release];
  return returnVal;
}

//******************************************************************************

- (ShopCredit *)leastActiveCredit {
  NSArray *activeCredits = [self activeCredits];
  if ([activeCredits count] != 0) {
    ShopCredit *leastCredit = (ShopCredit *)[activeCredits objectAtIndex:0];
    ShopCredit *current;
    unsigned int i, count = [activeCredits count];
    for (i = 1; i < count; i++) {
      current = (ShopCredit *)[activeCredits objectAtIndex:i];
      if ([current creditAmount] < [leastCredit creditAmount]) {
        leastCredit = current;
      }
    }
    return leastCredit;
  } else {
    return nil;
  }
}

//******************************************************************************

- (NSArray *)activeCredits {
  NSArray *credits = [[Credits sharedInstance] objectsForUids:creditUids];
  NSMutableArray *activeCredits = [[NSMutableArray alloc] init];
  unsigned int i, count = [credits count];
  for (i = 0; i < count; i++) {
    ShopCredit *obj = (ShopCredit *)[credits objectAtIndex:i];
    if (![obj hasBeenUsed]) {
      [activeCredits addObject:obj];
    }
  }
  return activeCredits;  
}

//******************************************************************************

- (void)applyMembership:(Product *)p forInvoice:(NSString *)aUid {
  //NSLog(@"in applyMembership");
  NSCalendarDate *today = [NSCalendarDate calendarDate];
  NSCalendarDate *endDate;
  NSCalendarDate *firstDate;
  NSCalendarDate *startDate;
  NSString *type = [p productCode];
  NSString *currentType = [[self membership] membershipType];
  if ([type isEqualToString:@"lifetime"] ||
      [type isEqualToString:@"cook"]) {
    endDate =  [today dateByAddingYears:25 
                                 months:0 
                                   days:0
                                  hours:0
                                minutes:0
                                seconds:0];
    if ([currentType isEqualToString:@"no"]) {
      firstDate = today;
      startDate = today;
    } else {
      firstDate = [[self membership] creationDate];
      startDate = [[self membership] startDate];
    }
  } else if ([currentType isEqualToString:@"no"] ||
             [currentType isEqualToString:@"expired"]) {
    endDate =  [today dateByAddingYears:1
                                 months:0 
                                   days:0
                                  hours:0
                                minutes:0
                                seconds:0];
    if ([currentType isEqualToString:@"no"]) {
      firstDate = today;
      startDate = today;
    } else {
      firstDate = [[self membership] creationDate];
      startDate = [[self membership] startDate];
    }
  } else {
    NSCalendarDate *oldDate = [[self membership] endDate];
    endDate = [oldDate dateByAddingYears:1
                                  months:0 
                                    days:0
                                   hours:0
                                 minutes:0
                                 seconds:0];
    firstDate = today;
    startDate = today;
  }
  
  [[self membership] setEndDate:endDate];
  [[self membership] setCreationDate:firstDate];
  [[self membership] setStartDate:startDate];
  [[self membership] setInvoiceUid:aUid];
  [[self membership] setMembershipType:type];
  [[Memberships sharedInstance] saveToDisk];
  [[People sharedInstance] saveToDisk];  
}


//******************************************************************************
// accessors and setters
//******************************************************************************
- (NSString *)personName {
  return personName;
}
- (void) setPersonName:(NSString *)arg {
  arg = [arg copy];
  [personName release];
  personName = arg;
}
- (NSString *)phoneNumber {
  return phoneNumber;
}
- (void) setPhoneNumber:(NSString *)arg {
  arg = [arg copy];
  [phoneNumber release];
  phoneNumber = arg;
}
- (NSString *)emailAddress {
  return emailAddress;
}
- (void) setEmailAddress:(NSString *)arg {
  arg = [arg copy];
  [emailAddress release];
  emailAddress = arg;
}
- (NSString *)companyName {
  return companyName;
}
- (void) setCompanyName:(NSString *)arg {
  arg = [arg copy];
  [companyName release];
  companyName = arg;
}
- (NSString *)address {
  return address;
}
- (void) setAddress:(NSString *)arg {
  arg = [arg copy];
  [address release];
  address = arg;
}
- (NSString *)city {
  return city;
}
- (void) setCity:(NSString *)arg {
  arg = [arg copy];
  [city release];
  city = arg;
}
- (NSString *)addressState {
  return addressState;
}
- (void) setAddressState:(NSString *)arg {
  arg = [arg copy];
  [addressState release];
  addressState = arg;
}
- (NSString *)zip {
  return zip;
}
- (void) setZip:(NSString *)arg {
  arg = [arg copy];
  [zip release];
  zip = arg;
}
- (bool)willTakeCheckFrom {
  return willTakeCheckFrom;
}
- (void) setWillTakeCheckFrom:(bool)arg {
 willTakeCheckFrom = arg;
}
- (bool)hasSignedLiabilityWaiver {
  return hasSignedLiabilityWaiver;
}
- (void) setHasSignedLiabilityWaiver:(bool)arg {
 hasSignedLiabilityWaiver = arg;
}
- (NSString *)membershipUid {
  return membershipUid;
}
- (void) setMembershipUid:(NSString *)arg {
  arg = [arg copy];
  [membershipUid release];
  membershipUid = arg;
}
- (NSMutableArray *)projectUids {
  return projectUids;
}
- (void) setProjectUids:(NSArray *)arg {
  if (arg != projectUids) {
    [projectUids release];
    projectUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)commentUids {
  return commentUids;
}
- (void) setCommentUids:(NSArray *)arg {
  if (arg != commentUids) {
    [commentUids release];
    commentUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)invoiceUids {
  return invoiceUids;
}
- (void) setInvoiceUids:(NSArray *)arg {
  if (arg != invoiceUids) {
    [invoiceUids release];
    invoiceUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)creditUids {
  return creditUids;
}
- (void) setCreditUids:(NSArray *)arg {
  if (arg != creditUids) {
    [creditUids release];
    creditUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)contactUids {
  return contactUids;
}
- (void) setContactUids:(NSArray *)arg {
  if (arg != contactUids) {
    [contactUids release];
    contactUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)cashDonationUids {
  return cashDonationUids;
}
- (void) setCashDonationUids:(NSArray *)arg {
  if (arg != cashDonationUids) {
    [cashDonationUids release];
    cashDonationUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)inKindDonationUids {
  return inKindDonationUids;
}
- (void) setInKindDonationUids:(NSArray *)arg {
  if (arg != inKindDonationUids) {
    [inKindDonationUids release];
    inKindDonationUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)compUids {
  return compUids;
}
- (void) setCompUids:(NSArray *)arg {
  if (arg != compUids) {
    [compUids release];
    compUids = [arg mutableCopy];
  }
}
@end