// 
// Book.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "Book.h"
#import "BookClassDescription.h"

@implementation Book

+ (void) initialize {
  if ( self == [Book class] ) {
    id superDescription = [[self superclass] classDescription];
    NSArray *attributeKeys = [superDescription attributeKeys];
    NSDictionary *typeForKey = [superDescription typeForKey];
    NSMutableArray *superAttributes = [NSMutableArray arrayWithArray:attributeKeys];
    NSMutableDictionary *superTypes = [NSMutableDictionary dictionaryWithDictionary:typeForKey];
    BookClassDescription *cd = [[BookClassDescription alloc] init];
    [superAttributes addObjectsFromArray:[NSArray arrayWithObjects:@"startingBalance",@"actualTotal",@"expectedTotal",@"variance",@"totalChecks",@"totalCards",@"totalCash",@"totalCredits",@"invoiceUids",@"checkUids",@"debitUids",@"creditUids",@"closerNameOrInitials",@"hundreds",@"fifties",@"twenties",@"tens",@"fives",@"twos",@"ones",@"isOpen",@"untaxableTotal",@"taxableTotal",@"taxOwed",@"projectsCompletedTotal",@"donationsTotal",@"standTimeTotal",@"freeStandTime",@"soldStandTime",@"volunteerHoursTotal",@"numberOfClients",@"pathToPdfArchive",@"compUids",@"totalValueOfComps",nil]];
    [superTypes setObject:LjDoubleType forKey:@"startingBalance"];
    [superTypes setObject:LjDoubleType forKey:@"actualTotal"];
    [superTypes setObject:LjDoubleType forKey:@"expectedTotal"];
    [superTypes setObject:LjDoubleType forKey:@"variance"];
    [superTypes setObject:LjDoubleType forKey:@"totalChecks"];
    [superTypes setObject:LjDoubleType forKey:@"totalCards"];
    [superTypes setObject:LjDoubleType forKey:@"totalCash"];
    [superTypes setObject:LjDoubleType forKey:@"totalCredits"];
    [superTypes setObject:LjArrayType forKey:@"invoiceUids"];
    [superTypes setObject:LjArrayType forKey:@"checkUids"];
    [superTypes setObject:LjArrayType forKey:@"debitUids"];
    [superTypes setObject:LjArrayType forKey:@"creditUids"];
    [superTypes setObject:LjStringType forKey:@"closerNameOrInitials"];
    [superTypes setObject:LjIntType forKey:@"hundreds"];
    [superTypes setObject:LjIntType forKey:@"fifties"];
    [superTypes setObject:LjIntType forKey:@"twenties"];
    [superTypes setObject:LjIntType forKey:@"tens"];
    [superTypes setObject:LjIntType forKey:@"fives"];
    [superTypes setObject:LjIntType forKey:@"twos"];
    [superTypes setObject:LjIntType forKey:@"ones"];
    [superTypes setObject:LjBooleanType forKey:@"isOpen"];
    [superTypes setObject:LjDoubleType forKey:@"untaxableTotal"];
    [superTypes setObject:LjDoubleType forKey:@"taxableTotal"];
    [superTypes setObject:LjDoubleType forKey:@"taxOwed"];
    [superTypes setObject:LjIntType forKey:@"projectsCompletedTotal"];
    [superTypes setObject:LjDoubleType forKey:@"donationsTotal"];
    [superTypes setObject:LjDoubleType forKey:@"standTimeTotal"];
    [superTypes setObject:LjDoubleType forKey:@"freeStandTime"];
    [superTypes setObject:LjDoubleType forKey:@"soldStandTime"];
    [superTypes setObject:LjIntType forKey:@"volunteerHoursTotal"];
    [superTypes setObject:LjIntType forKey:@"numberOfClients"];
    [superTypes setObject:LjStringType forKey:@"pathToPdfArchive"];
    [superTypes setObject:LjArrayType forKey:@"compUids"];
    [superTypes setObject:LjDoubleType forKey:@"totalValueOfComps"];
    [cd setAttributeKeys:superAttributes];
    [cd setTypeForKey:superTypes];
    [NSClassDescription registerClassDescription:cd forClass:[self class]];
    [cd release];
  }
}

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setStartingBalance:0.0];
    [self setActualTotal:0.0];
    [self setExpectedTotal:0.0];
    [self setVariance:0.0];
    [self setTotalChecks:0.0];
    [self setTotalCards:0.0];
    [self setTotalCash:0.0];
    [self setTotalCredits:0.0];
    NSArray *iuids = [[NSArray alloc] init];
    [self setInvoiceUids:iuids];
    [iuids release];
    NSArray *cuids = [[NSArray alloc] init];
    [self setCheckUids:cuids];
    [cuids release];
    NSArray *duids = [[NSArray alloc] init];
    [self setDebitUids:duids];
    [duids release];
    NSArray *cruids = [[NSArray alloc] init];
    [self setCreditUids:cruids];
    [cruids release];
    [self setCloserNameOrInitials:@""];
    [self setHundreds:0];
    [self setFifties:0];
    [self setTwenties:0];
    [self setTens:0];
    [self setFives:0];
    [self setTwos:0];
    [self setOnes:0];
    [self setIsOpen:YES];
    [self setUntaxableTotal:0.0];
    [self setTaxableTotal:0.0];
    [self setTaxOwed:0.0];
    [self setProjectsCompletedTotal:0];
    [self setDonationsTotal:0.0];
    [self setStandTimeTotal:0.0];
    [self setVolunteerHoursTotal:0];
    [self setNumberOfClients:0];
    [self setPathToPdfArchive:@""];
    [self setFreeStandTime:0.0];
    [self setSoldStandTime:0.0];
    NSArray *couids = [[NSArray alloc] init];
    [self setCompUids:couids];
    [couids release];
    [self setTotalValueOfComps:0.0];

  }
  return self;
}


//******************************************************************************
// dealloc
//******************************************************************************
- (void) dealloc {
  [invoiceUids release];
  [checkUids release];
  [debitUids release];
  [creditUids release];
  [closerNameOrInitials release];
  [pathToPdfArchive release];
  [compUids release];
  [super dealloc];
}

//******************************************************************************

- (NSString *)description {
  return [NSString stringWithFormat:@"<Book: %@ %@ %@ %1.2f %1.2f %1.2f %1.2f %1.2f %1.2f %@>",
    [self uid], [[self date] descriptionWithCalendarFormat:@"%m/%d/%Y"],
    [self bookOpenYesOrNo], startingBalance, expectedTotal, actualTotal, variance,
    taxableTotal, untaxableTotal, closerNameOrInitials];
}


//******************************************************************************
// encode
//******************************************************************************
- (void)encodeWithCoder:(NSCoder *)coder {
  [super encodeWithCoder:coder];
  [coder encodeDouble:startingBalance forKey:@"startingBalance"];
  [coder encodeDouble:actualTotal forKey:@"actualTotal"];
  [coder encodeDouble:expectedTotal forKey:@"expectedTotal"];
  [coder encodeDouble:variance forKey:@"variance"];
  [coder encodeDouble:totalChecks forKey:@"totalChecks"];
  [coder encodeDouble:totalCards forKey:@"totalCards"];
  [coder encodeDouble:totalCash forKey:@"totalCash"];
  [coder encodeDouble:totalCredits forKey:@"totalCredits"];
  [coder encodeObject:invoiceUids forKey:@"invoiceUids"];
  [coder encodeObject:checkUids forKey:@"checkUids"];
  [coder encodeObject:debitUids forKey:@"debitUids"];
  [coder encodeObject:creditUids forKey:@"creditUids"];
  [coder encodeObject:closerNameOrInitials forKey:@"closerNameOrInitials"];
  [coder encodeInt:hundreds forKey:@"hundreds"];
  [coder encodeInt:fifties forKey:@"fifties"];
  [coder encodeInt:twenties forKey:@"twenties"];
  [coder encodeInt:tens forKey:@"tens"];
  [coder encodeInt:fives forKey:@"fives"];
  [coder encodeInt:twos forKey:@"twos"];
  [coder encodeInt:ones forKey:@"ones"];
  [coder encodeBool:isOpen forKey:@"isOpen"];
  [coder encodeDouble:untaxableTotal forKey:@"untaxableTotal"];
  [coder encodeDouble:taxableTotal forKey:@"taxableTotal"];
  [coder encodeDouble:taxOwed forKey:@"taxOwed"];
  [coder encodeInt:projectsCompletedTotal forKey:@"projectsCompletedTotal"];
  [coder encodeDouble:donationsTotal forKey:@"donationsTotal"];
  [coder encodeDouble:standTimeTotal forKey:@"standTimeTotal"];
  [coder encodeInt:volunteerHoursTotal forKey:@"volunteerHoursTotal"];
  [coder encodeInt:numberOfClients forKey:@"numberOfClients"];
  [coder encodeObject:pathToPdfArchive forKey:@"pathToPdfArchive"];
  [coder encodeDouble:freeStandTime forKey:@"freeStandTime"];
  [coder encodeDouble:soldStandTime forKey:@"soldStandTime"];
  [coder encodeObject:compUids forKey:@"compUids"];
  [coder encodeDouble:totalValueOfComps forKey:@"totalValueOfComps"];
}


//******************************************************************************
// decode
//******************************************************************************
- (id)initWithCoder:(NSCoder *)coder {
  [super initWithCoder:coder];
  [self setStartingBalance:[coder decodeDoubleForKey:@"startingBalance"]];
  [self setActualTotal:[coder decodeDoubleForKey:@"actualTotal"]];
  [self setExpectedTotal:[coder decodeDoubleForKey:@"expectedTotal"]];
  [self setVariance:[coder decodeDoubleForKey:@"variance"]];
  [self setTotalChecks:[coder decodeDoubleForKey:@"totalChecks"]];
  [self setTotalCards:[coder decodeDoubleForKey:@"totalCards"]];
  [self setTotalCash:[coder decodeDoubleForKey:@"totalCash"]];
  [self setTotalCredits:[coder decodeDoubleForKey:@"totalCredits"]];
  [self setInvoiceUids:[coder decodeObjectForKey:@"invoiceUids"]];
  [self setCheckUids:[coder decodeObjectForKey:@"checkUids"]];
  [self setDebitUids:[coder decodeObjectForKey:@"debitUids"]];
  [self setCreditUids:[coder decodeObjectForKey:@"creditUids"]];
  [self setCloserNameOrInitials:[coder decodeObjectForKey:@"closerNameOrInitials"]];
  [self setHundreds:[coder decodeIntForKey:@"hundreds"]];
  [self setFifties:[coder decodeIntForKey:@"fifties"]];
  [self setTwenties:[coder decodeIntForKey:@"twenties"]];
  [self setTens:[coder decodeIntForKey:@"tens"]];
  [self setFives:[coder decodeIntForKey:@"fives"]];
  [self setTwos:[coder decodeIntForKey:@"twos"]];
  [self setOnes:[coder decodeIntForKey:@"ones"]];
  [self setIsOpen:[coder decodeBoolForKey:@"isOpen"]];
  [self setUntaxableTotal:[coder decodeDoubleForKey:@"untaxableTotal"]];
  [self setTaxableTotal:[coder decodeDoubleForKey:@"taxableTotal"]];
  [self setTaxOwed:[coder decodeDoubleForKey:@"taxOwed"]];
  [self setProjectsCompletedTotal:[coder decodeIntForKey:@"projectsCompletedTotal"]];
  [self setDonationsTotal:[coder decodeDoubleForKey:@"donationsTotal"]];
  [self setStandTimeTotal:[coder decodeDoubleForKey:@"standTimeTotal"]];
  [self setVolunteerHoursTotal:[coder decodeIntForKey:@"volunteerHoursTotal"]];
  [self setNumberOfClients:[coder decodeIntForKey:@"numberOfClients"]];
  [self setPathToPdfArchive:[coder decodeObjectForKey:@"pathToPdfArchive"]];
  [self setFreeStandTime:[coder decodeDoubleForKey:@"freeStandTime"]];
  [self setSoldStandTime:[coder decodeDoubleForKey:@"soldStandTime"]];
  [self setCompUids:[coder decodeObjectForKey:@"compUids"]];
  [self setTotalValueOfComps:[coder decodeDoubleForKey:@"totalValueOfComps"]];  
 return self;
}


//******************************************************************************
// methods
//******************************************************************************
- (NSString *)bookOpenYesOrNo {
  if (isOpen) {
    return @"yes";
  } else {
    return @"no";
  }
}


//******************************************************************************
// accessors and setters
//******************************************************************************
- (double)startingBalance {
  return startingBalance;
}
- (void) setStartingBalance:(double)arg {
 startingBalance = arg;
}
- (double)actualTotal {
  return actualTotal;
}
- (void) setActualTotal:(double)arg {
 actualTotal = arg;
}
- (double)expectedTotal {
  return expectedTotal;
}
- (void) setExpectedTotal:(double)arg {
 expectedTotal = arg;
}
- (double)variance {
  return variance;
}
- (void) setVariance:(double)arg {
 variance = arg;
}
- (double)totalChecks {
  return totalChecks;
}
- (void) setTotalChecks:(double)arg {
 totalChecks = arg;
}
- (double)totalCards {
  return totalCards;
}
- (void) setTotalCards:(double)arg {
 totalCards = arg;
}
- (double)totalCash {
  return totalCash;
}
- (void) setTotalCash:(double)arg {
 totalCash = arg;
}
- (double)totalCredits {
  return totalCredits;
}
- (void) setTotalCredits:(double)arg {
 totalCredits = arg;
}
- (NSMutableArray *)invoiceUids {
  return invoiceUids;
}
- (void) setInvoiceUids:(NSArray *)arg {
  if (arg != invoiceUids) {
    [invoiceUids release];
    invoiceUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)checkUids {
  return checkUids;
}
- (void) setCheckUids:(NSArray *)arg {
  if (arg != checkUids) {
    [checkUids release];
    checkUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)debitUids {
  return debitUids;
}
- (void) setDebitUids:(NSArray *)arg {
  if (arg != debitUids) {
    [debitUids release];
    debitUids = [arg mutableCopy];
  }
}
- (NSMutableArray *)creditUids {
  return creditUids;
}
- (void) setCreditUids:(NSArray *)arg {
  if (arg != creditUids) {
    [creditUids release];
    creditUids = [arg mutableCopy];
  }
}
- (NSString *)closerNameOrInitials {
  return closerNameOrInitials;
}
- (void) setCloserNameOrInitials:(NSString *)arg {
  arg = [arg copy];
  [closerNameOrInitials release];
  closerNameOrInitials = arg;
}
- (int)hundreds {
  return hundreds;
}
- (void) setHundreds:(int)arg {
 hundreds = arg;
}
- (int)fifties {
  return fifties;
}
- (void) setFifties:(int)arg {
 fifties = arg;
}
- (int)twenties {
  return twenties;
}
- (void) setTwenties:(int)arg {
 twenties = arg;
}
- (int)tens {
  return tens;
}
- (void) setTens:(int)arg {
 tens = arg;
}
- (int)fives {
  return fives;
}
- (void) setFives:(int)arg {
 fives = arg;
}
- (int)twos {
  return twos;
}
- (void) setTwos:(int)arg {
 twos = arg;
}
- (int)ones {
  return ones;
}
- (void) setOnes:(int)arg {
 ones = arg;
}
- (bool)isOpen {
  return isOpen;
}
- (void) setIsOpen:(bool)arg {
 isOpen = arg;
}
- (double)untaxableTotal {
  return untaxableTotal;
}
- (void) setUntaxableTotal:(double)arg {
 untaxableTotal = arg;
}
- (double)taxableTotal {
  return taxableTotal;
}
- (void) setTaxableTotal:(double)arg {
 taxableTotal = arg;
}
- (double)taxOwed {
  return taxOwed;
}
- (void) setTaxOwed:(double)arg {
 taxOwed = arg;
}
- (int)projectsCompletedTotal {
  return projectsCompletedTotal;
}
- (void) setProjectsCompletedTotal:(int)arg {
 projectsCompletedTotal = arg;
}
- (double)donationsTotal {
  return donationsTotal;
}
- (void) setDonationsTotal:(double)arg {
 donationsTotal = arg;
}
- (double)standTimeTotal {
  return standTimeTotal;
}
- (void) setStandTimeTotal:(double)arg {
 standTimeTotal = arg;
}
- (int)volunteerHoursTotal {
  return volunteerHoursTotal;
}
- (void) setVolunteerHoursTotal:(int)arg {
 volunteerHoursTotal = arg;
}
- (int)numberOfClients {
  return numberOfClients;
}
- (void) setNumberOfClients:(int)arg {
 numberOfClients = arg;
}
- (NSString *)pathToPdfArchive {
  return pathToPdfArchive;
}
- (void) setPathToPdfArchive:(NSString *)arg {
  arg = [arg copy];
  [pathToPdfArchive release];
  pathToPdfArchive = arg;
}
- (double)freeStandTime {
  return freeStandTime;
}
- (void) setFreeStandTime:(double)arg {
  freeStandTime = arg;
}
- (double)soldStandTime {
  return soldStandTime;
}
- (void) setSoldStandTime:(double)arg {
  soldStandTime = arg;
}
- (NSMutableArray *)compUids {
  return compUids;
}
- (void) setCompUids:(NSArray *)arg {
  if (arg != compUids) {
    [compUids release];
    compUids = [arg mutableCopy];
  }
}
- (double)totalValueOfComps {
  return totalValueOfComps;
}
- (void) setTotalValueOfComps:(double)arg {
  totalValueOfComps = arg;
}

@end