// 
// PersonEditor.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "PersonEditor.h"
#import "People.h"
#import "Membership.h"
#import "Memberships.h"

@implementation PersonEditor

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"PersonEditor"];
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  [person release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)windowDidLoad {
  [super windowDidLoad];
  [self setupButtons];
  [self setupTextFields];
  [self setupTables];
  [self setupStateVariables];
}

//******************************************************************************

- (void)setupForModal {
  [super setupForModal];
  [self setupButtons];
  [self setupTextFields];
  [self setupTables];
  [self setupStateVariables];
}

//******************************************************************************

- (void)setupForNonModal {
  [super setupForNonModal];
  [self setupButtons];
  [self setupTextFields];
  [self setupTables];
  [self setupStateVariables];
}

//******************************************************************************

- (void)runModalWithParent:(NSWindow *) parent {
  [super runModalWithParent:parent];
}


//******************************************************************************
// setup
//******************************************************************************

- (void)setupButtons {
  [cancelButton setEnabled:NO];
  [saveButton setEnabled:NO];
  [checkButton setState:[person willTakeCheckFrom]];
  [waiverButton setState:[person hasSignedLiabilityWaiver]];
  [datePicker setDateValue:[person membershipEndDate]];
}

//******************************************************************************

- (void)setupTextFields {
  [nameTextField setStringValue:[person personName]];
  [phoneTextField setStringValue:[person phoneNumber]];
  [emailTextField setStringValue:[person emailAddress]];
  [membershipComboBox setStringValue:[person memberType]];
  [balanceTextField setDoubleValue:[person personBalance]];
}

//******************************************************************************

- (void)setupTables {
  // no tables
}

//******************************************************************************

- (void)setupStateVariables {
  // no vars
}


//******************************************************************************
// button actions
//******************************************************************************

- (IBAction)datePickerClicked:(id)sender {
    //NSLog(@"datePicker clicked");
  [self enableSaveButtonAppropriately];
}

//******************************************************************************

- (IBAction)waiverButtonClicked:(id)sender {
  //NSLog(@"waiverButton clicked");
  [self enableSaveButtonAppropriately];
}

//******************************************************************************

- (IBAction)saveButtonClicked:(id)sender {
  //NSLog(@"saveButton clicked");
  NSString *newName = [self lowercaseAndLatexSafeStringFromTextField:nameTextField];
  NSString *newPhone = [phoneTextField stringValue];
  NSString *newEmail = [self lowercaseAndLatexSafeStringFromTextField:emailTextField];
  
  bool badPerson, badPhone, badEmail;
  NSString *thisUid = [person uid];
  // if there exists a person with the same name, but different uid then bad person
  if (![newName isEqualToString:[person personName]]) {
    NSMutableArray *all = [[People sharedInstance] arrayForDictionary];
    NSPredicate *pred = [NSPredicate predicateWithFormat:@"personName like %@ AND !(uid like %@)",
      newName, thisUid];
    NSArray *conflicts = [all filteredArrayUsingPredicate:pred];
    if ([conflicts count] > 0) {
      badPerson = YES;
    } 
  } else {
    badPerson = NO;
  }
  
  if (![newPhone isEqualToString:[person phoneNumber]]) {
    badPhone = [[People sharedInstance] phoneNumberIsBadlyFormatted:newPhone];
  } else {
    badPhone = NO;
  }
  
  if (![newEmail isEqualToString:[person emailAddress]]) {
    badEmail = [[People sharedInstance] emailAddressAppearsInPeopleInSingleton:person];
  } else {
    badEmail = NO;
  }
  
  //NSLog(@"bad person: %d !bypassDuplicatePerson: %d", badPerson, !bypassDuplicatePerson);
  if (badPerson) {
    [self runBadNameWithName:newName andBadPhone:badPhone andBadEmail:badEmail];
  } else if (badPhone) {
    [self runBadPhone];
  } else if (badEmail) {
    [self runBadEmail];
  } else {
    [self runEditPerson];
  }
}

//******************************************************************************

- (void)runBadNameWithName:(NSString *)name andBadPhone:(bool)badPhone andBadEmail:(bool)badEmail {
  ////NSLog(@"in bad person");
  NSString *message = 
  [NSString stringWithFormat:@"Person with name %@ already exists.",name];
  NSString *duplicatePeopleString =
    [[People sharedInstance] alertMessageForDuplicatePersonsInCustomerAdd:person];
  message = [message stringByAppendingString:[NSString stringWithFormat:@"\n%@", duplicatePeopleString]];
  int choice = NSRunAlertPanel(@"Duplicate Name", message, @"Try Again", @"Continue Save",nil);
  
  // try again = 1, cancel = -1, continue add = 0
  if (choice == 1) {
    // do nothing methinks
    //    [NSApp stopModal];
    //    // rerun create customer
    //    [self runModalWithParent:m
  } else if (choice == 0) {
    //bypassDuplicatePerson = YES;
    if (badPhone) {
      [self runBadPhone];
    } else if (badEmail) {
      [self runBadEmail];
    } else {
      [self runEditPerson];
    }
  }
}

//******************************************************************************

- (void)runBadPhone {
  NSString *newPhone = [phoneTextField stringValue];
  NSString *message = [NSString stringWithFormat:@"Phone number %@ is badly formatted,\nFollow the 213.700.6271 example.",
    newPhone];
  NSRunAlertPanel(@"Bad Phone Number", message, @"Try Again", @"Cancel", nil);
  //int choice = NSRunAlertPanel(@"Bad Phone Number", message, @"Try Again", @"Cancel", nil);
  
  
  
  // no matter what, we refocus - the phone number is badly formatted
  //  if ([infoPhoneTextField acceptsFirstResponder]) {
  //    [[self window] makeFirstResponder:infoPhoneTextField];
  //  } 
  //  if (choice == 1) {
  //    if ([infoPhoneTextField acceptsFirstResponder]) {
  //      [[self window] makeFirstResponder:infoPhoneTextField];
  //    } 
  //    // do nothing methinks
  //    //[NSApp stopModal];
  //    //// rerun create customer
  //    //[self runModalWithParent:mainApplicationWindow];
  //  }
}

//******************************************************************************

- (void)runBadEmail {
  NSString *newEmail = [self lowercaseAndLatexSafeStringFromTextField:emailTextField];
  NSString *message = 
    [NSString stringWithFormat:@"Person with email %@ already exists.\nThis is not allowed.", newEmail];
  NSRunAlertPanel(@"Duplicate Email Address", message, @"Try Again", @"Cancel", nil);
  //int choice = NSRunAlertPanel(@"Duplicate Email Address", message, @"Try Again", @"Cancel", nil);
  // no matter, what refocus - no duplicate emails
  //  if ([infoEmailTextField acceptsFirstResponder]) {
  //    [[self window] makeFirstResponder:infoEmailTextField];
  //  } 
  //  if (choice == 1) {
  //    if ([infoEmailTextField acceptsFirstResponder]) {
  //      [[self window] makeFirstResponder:infoEmailTextField];
  //    } 
  //    // do nothing methinks
  //    //    [NSApp stopModal];
  //    //    // rerun create customer
  //    //    [self runModalWithParent:mainApplicationWindow];
  //  } 
}

//******************************************************************************

- (void)runEditPerson {
  [person setPersonName:[self lowercaseAndLatexSafeStringFromTextField:nameTextField]];
  [person setPhoneNumber:[phoneTextField stringValue]];
  [person setEmailAddress:[self lowercaseAndLatexSafeStringFromTextField:emailTextField]];
  
  // accept check
  bool willTake;
  if ([checkButton state] == 1) {
    willTake = YES;
  } else {
    willTake = NO;
  }
  [person setWillTakeCheckFrom:willTake];
  
  bool hasSigned;
  if ([waiverButton state] == 1) {
    hasSigned = YES;
  } else {
    hasSigned = NO;
  }
  [person setHasSignedLiabilityWaiver:hasSigned];
  
  Membership *mem = [person membership];
  [mem setEndDate:[self calendarDateFromDatePicker:datePicker]];
  [mem setMembershipType:[self stringFromComboBox:membershipComboBox]];
  [[Memberships sharedInstance] saveToDisk];
  
  
  [[People sharedInstance] saveToDisk];
  
  [saveButton setEnabled:NO];
  [cancelButton setEnabled:NO];
  
}


//******************************************************************************

- (IBAction)cancelButtonClicked:(id)sender {
  //NSLog(@"cancelButton clicked");
  [self setupButtons];
  [self setupTextFields];
}

//******************************************************************************

- (IBAction)checkButtonClicked:(id)sender {
    //NSLog(@"checkButton clicked");
  [self enableSaveButtonAppropriately];
}

//******************************************************************************

- (IBAction)closeButtonClicked:(id)sender {
  //NSLog(@"closeButton clicked");
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}

//******************************************************************************
// misc
//******************************************************************************
- (void)enableSaveButtonAppropriately {
  bool acceptIsDifferent;
  bool orgWill = [person willTakeCheckFrom];
  bool newWill;
  if ([checkButton state] == 1) {
    newWill = YES;
  } else {
    newWill = NO;
  }
  if (orgWill == newWill) {
    acceptIsDifferent = NO;
  } else {
    acceptIsDifferent = YES;
  }
  
  bool waiverIsDifferent;
  bool org = [person hasSignedLiabilityWaiver];
  bool new;
  if ([waiverButton state] == 1) {
    new = YES;
  } else {
    new = NO;
  }
  if (org == new) {
    waiverIsDifferent = NO;
  } else {
    waiverIsDifferent = YES;
  }
  
  bool dateDifferent;
  NSCalendarDate *orgDate = [person membershipEndDate];
  NSCalendarDate *newDate = [self calendarDateFromDatePicker:datePicker];
  if ([self date:newDate equalsDate:orgDate]) {
    dateDifferent = NO;
  } else {
    dateDifferent = YES;
  }
  
  
  NSString *newName = [nameTextField stringValue];
  NSString *orgName = [person personName];
  NSString *newPhone = [phoneTextField stringValue];
  NSString *orgPhone = [person phoneNumber];
  NSString *newEmail = [emailTextField stringValue];
  NSString *orgEmail = [person emailAddress];
  NSString *newCompany = [companyTextField stringValue];
  NSString *orgCompany = [person companyName];
  NSString *newAddress = [addressTextField stringValue];
  NSString *orgAddress = [person address];
  NSString *newCity = [cityTextField stringValue];
  NSString *orgCity = [person city];
  NSString *newState = [addressStateTextField stringValue];
  NSString *orgState = [person addressState];
  NSString *newZip = [zipTextField stringValue];
  NSString *orgZip = [person zip];
  NSString *newType = [self stringFromComboBox:membershipComboBox];
  NSString *orgType = [person memberType];
  
  if (acceptIsDifferent || waiverIsDifferent || dateDifferent ||
      ![self string:newName equalsString:orgName] ||
      ![self string:newPhone equalsString:orgPhone] ||
      ![self string:newEmail equalsString:orgEmail] ||
      ![self string:newType equalsString:orgType] ||
      ![self string:newCompany equalsString:orgCompany] ||
      ![self string:newAddress equalsString:orgAddress] ||
      ![self string:newCity equalsString:orgCity] ||
      ![self string:newState equalsString:orgState] ||
      ![self string:newZip equalsString:orgZip]) {
    
    [cancelButton setEnabled:YES];
    [saveButton setEnabled:YES];
  } else {
    [cancelButton setEnabled:NO];
    [saveButton setEnabled:NO];
  }
}


//******************************************************************************
// handlers
//******************************************************************************

- (void) textDidChange:(NSNotification *)note {
  if ([[self window] isKeyWindow]) {
    [self enableSaveButtonAppropriately];
  }
}


//******************************************************************************
// accessors and setters
//******************************************************************************

- (Person *)person {
  return person;
}
- (void) setPerson:(Person *)arg {
  [arg retain];
  [person release];
  person = arg;
}


//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
     NSNotificationCenter *nc;
     nc = [NSNotificationCenter defaultCenter];

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSControlTextDidChangeNotification
    object:nameTextField];

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSControlTextDidChangeNotification
    object:phoneTextField];

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSControlTextDidChangeNotification
    object:emailTextField];
    
    
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:companyTextField];
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:addressTextField];
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:addressStateTextField];
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:cityTextField];
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:zipTextField];
    

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSComboBoxSelectionDidChangeNotification
    object:membershipComboBox];

}
@end