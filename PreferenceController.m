// 
// PreferenceController.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "PreferenceController.h"
#import "Books.h"
#import "Book.h"
#import "Products.h"

NSString *TljBkPosSalesTaxRate = @"SalesTaxRate";
NSString *TljBkPosStartingBookAmount = @"StartingBookAmount";
NSString *TljBkPosWillAcceptCreditCards = @"WillAcceptCreditCards";
NSString *TljBkPosWillAcceptCreditCardsChanged = @"WillAcceptCreditCardsChanged";
NSString *TljBkPosCookMembershipInfo = @"cook";
NSString *TljBkPosDeluxeMembershipInfo = @"deluxe";
NSString *TljBkPosRegularMembershipInfo = @"regular";
NSString *TljBkPosLifetimeMembershipInfo = @"lifetime";
NSString *TljBkPosAnonymousClientName = @"quick sale";
NSString *TljBkPosPathToLatexKey = @"pathToLatexKey";
NSString *TljBkPosStandTimeRateKey = @"standTimeRateKey";
NSString *TljBkPosStandTimeProductCode = @"stand";
NSString *TljBkPosProjectProductCode = @"project";
NSString *TljBkPosDonationProductCode = @"donation";


@implementation PreferenceController

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"Preferences"];
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  
  NSEnumerator *enumerator;
  id value;
  enumerator = [membershipInformationArray objectEnumerator];
  while ((value = [enumerator nextObject])) {
    [self stopObservingMembershipInformation:value];
    [value release];
  }  
  [membershipInformationArray release];
 
  
  [pathToLatex release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)setupForNonModal {
  //NSLog(@"setupForNonModal");
  [saveSalesTaxButton setEnabled:NO];
  [saveStartingBalanceButton setEnabled:NO];
  [saveMembershipInformationButton setEnabled:NO];
  [savePathToLatexButton setEnabled:NO];
  [saveStandTimeRateButton setEnabled:NO];

  double defaultSalesTax = [self loadDefaultSalesTax];
  double defaultStartingBookAmount = [self loadDefaultStartingBookAmount];
  bool defaultUsingCard = [self loadDefaultWillAcceptCreditCard];
  NSString *defaultPathToLatex = [self loadDefaultPathToLatex];
  double defaultStandTimeRate = [self loadDefaultStandTimeRate];
  
  //NSLog(@"defaultSalesTax: %1.2f", defaultSalesTax);
  //NSLog(@"defaultStartingBookAmount: %1.2f", defaultStartingBookAmount);
  //NSLog(@"defaultUsingCard: %d", defaultUsingCard);
  [self setSalesTax:defaultSalesTax];
  [self setStartingBookAmount:defaultStartingBookAmount];
  [self setWillAcceptCreditCards:defaultUsingCard];
  [self setPathToLatex:defaultPathToLatex];
  [self setStandTimeRate:defaultStandTimeRate];
  
  [salesTaxTextField setDoubleValue:defaultSalesTax];
  [startingBalanceTextField setDoubleValue:defaultStartingBookAmount];
  [pathToLatexTextField setStringValue:defaultPathToLatex];
  [standTimeRateTextField setDoubleValue:defaultStandTimeRate];
  
  if (defaultUsingCard) {
    [willAcceptCreditCardsButton setState:1];
  } else {
    [willAcceptCreditCardsButton setState:0];
  }
  [self setMembershipInformationArray:[self loadDefaultMembershipInformation]];
  [membershipInformationTableView setTarget:self];
  [membershipInformationTableView setAction:@selector(handleMembershipInformationClicked:)];
  [membershipInformationTableView setDoubleAction:@selector(handleMembershipInformationClicked:)];
  [self handleMembershipInformationClicked:self];
}


//******************************************************************************
// button actions
//******************************************************************************

- (IBAction)saveStartingBalanceButtonClicked:(id)sender {
  //NSLog(@"saveStartingBalanceButton clicked");
  bool operationPermitted;
  Book *cb = [[Books sharedInstance] currentBook];
  if (cb == nil) {
    operationPermitted = YES;
  } else  {
    if ([cb isOpen]) {
      operationPermitted = NO;
    } else {
      operationPermitted = YES;
    }
  }
  
  if (operationPermitted) {
    [self setStartingBookAmount:[startingBalanceTextField doubleValue]];
    [saveStartingBalanceButton setEnabled:NO];
  } else {
    NSRunAlertPanel(@"Operation Not Permitted",@"There is a current book open. Close the book to make this change.",
                    @"Continue", nil, nil);
    [startingBalanceTextField setDoubleValue:[self startingBookAmount]];
    [saveStartingBalanceButton setEnabled:NO];
  }
}

//******************************************************************************


- (IBAction)saveSalesTaxButtonClicked:(id)sender {
  //NSLog(@"saveSalesTaxButton clicked");
  bool operationPermitted;
  Book *cb = [[Books sharedInstance] currentBook];
  if (cb == nil) {
    operationPermitted = YES;
  } else  {
    if ([cb isOpen]) {
      operationPermitted = NO;
    } else {
      operationPermitted = YES;
    }
  }
  
  if (operationPermitted) {
    [self setSalesTax:[salesTaxTextField doubleValue]];
    [saveSalesTaxButton setEnabled:NO];
  } else {
    NSRunAlertPanel(@"Operation Not Permitted",@"There is a current book open. Close the book to make this change.",
                    @"Continue", nil, nil);
    [salesTaxTextField setDoubleValue:[self salesTax]];
    [saveSalesTaxButton setEnabled:NO];
  }  
}

//******************************************************************************

- (IBAction)willAcceptCreditCardsButtonClicked:(id)sender {
  //NSLog(@"willAcceptCreditCardsButton clicked");
  
  int choice = NSRunAlertPanel(@"Warning",@"This change will take effect immediately",
                               @"Continue", @"Cancel", nil);
  //NSLog(@"choice == %d", choice);
  if (choice == 1) {
    [self setWillAcceptCreditCards:[willAcceptCreditCardsButton state]];

    // send a notification
    // no one is listening for this yet, but it might be important    
    NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
    [nc postNotificationName:TljBkPosWillAcceptCreditCardsChanged object:self];  
  } else {
    [willAcceptCreditCardsButton setState:[self willAcceptCreditCards]];
  }
}

//******************************************************************************

- (IBAction)saveMembershipInformationButtonClicked:(id)sender {
  //NSLog(@"saveMembershipInformationButton clicked");
  
  bool operationPermitted;
  Book *cb = [[Books sharedInstance] currentBook];
  if (cb == nil) {
    operationPermitted = YES;
  } else  {
    if ([cb isOpen]) {
      operationPermitted = NO;
    } else {
      operationPermitted = YES;
    }
  }
  
  if (operationPermitted) {
    NSArray *selected = [membershipInformationArrayController selectedObjects];
    if ([selected count] > 0) {
      MembershipInformation *tmp = (MembershipInformation *)[selected objectAtIndex:0];
      if (tmp != nil) {
        [tmp setDurationInDays:[durationTextField intValue]];
        [tmp setPriceOfMembership:[priceTextField doubleValue]];
        [tmp setDiscountOnNewParts:[newPartsDiscountTextField doubleValue]];
        [tmp setDiscountOnWorkshops:[workshopDiscountTextField doubleValue]];
        NSString *key, *name;
        name = [tmp membershipType];
        if ([name isEqual: @"cook"]) {
          key = TljBkPosCookMembershipInfo;
        } else if ([name isEqual: @"lifetime"]) {
          key = TljBkPosLifetimeMembershipInfo;
        } else if ([name isEqual: @"regular"]) {
          key = TljBkPosRegularMembershipInfo;
        } else {
          key = TljBkPosDeluxeMembershipInfo;
        }
        
        NSData *membershipInfoAsData =  [NSKeyedArchiver archivedDataWithRootObject:tmp];
        [[NSUserDefaults standardUserDefaults] setObject:membershipInfoAsData
                                                  forKey:key];
        [cancelMembershipEditButton setEnabled:NO];
        [saveMembershipInformationButton setEnabled:NO];
        
        [self setMembershipInformationArray:[self loadDefaultMembershipInformation]];
        [self handleMembershipInformationClicked:self];
      }  
      
    }
  } else {
    NSRunAlertPanel(@"Operation Not Permitted",@"There is a current book open. Close the book to make this change.",
                    @"Continue", nil, nil);
    [self setMembershipInformationArray:[self loadDefaultMembershipInformation]];
    //[membershipInformationTableView reloadData];
    [saveMembershipInformationButton setEnabled:NO];
    [cancelMembershipEditButton setEnabled:NO];
    [self handleMembershipInformationClicked:self];
  }
}

//******************************************************************************

- (IBAction)savePathToLatexButtonClicked:(id)sender {
  [self setPathToLatex:[pathToLatexTextField stringValue]];
  [savePathToLatexButton setEnabled:NO];
}

//******************************************************************************

- (IBAction)saveStandTimeRateButtonClicked:(id)sender {
  bool operationPermitted;
  Book *cb = [[Books sharedInstance] currentBook];
  if (cb == nil) {
    operationPermitted = YES;
  } else  {
    if ([cb isOpen]) {
      operationPermitted = NO;
    } else {
      operationPermitted = YES;
    }
  }

  if (operationPermitted) {
    double newRate = [standTimeRateTextField doubleValue];
    [self setStandTimeRate:newRate];
    [saveStandTimeRateButton setEnabled:NO];
    Product *stand = [[Products sharedInstance] productForProductCode:TljBkPosStandTimeProductCode];
    [stand setProductPrice:newRate];
    [[Products sharedInstance] saveToDisk];
  } else {
    NSRunAlertPanel(@"Operation Not Permitted",@"There is a current book open. Close the book to make this change.",
                    @"Continue", nil, nil);
    [standTimeRateTextField setDoubleValue:[self standTimeRate]];
    [saveStandTimeRateButton setEnabled:NO];
  }
}

//******************************************************************************

- (IBAction)cancelMembershipEditButton:(id)sender {
  [self handleMembershipInformationClicked:self];
}

//******************************************************************************
// misc
//******************************************************************************

- (double)loadDefaultSalesTax {
  NSUserDefaults *defaults;
  defaults = [NSUserDefaults standardUserDefaults];
  return [[defaults objectForKey:TljBkPosSalesTaxRate] doubleValue];
}

//******************************************************************************

- (double)loadDefaultStartingBookAmount {
  NSUserDefaults *defaults;
  defaults = [NSUserDefaults standardUserDefaults];
  return [[defaults objectForKey:TljBkPosStartingBookAmount] doubleValue];
}

//******************************************************************************

- (bool)loadDefaultWillAcceptCreditCard {
  NSUserDefaults *defaults;
  defaults = [NSUserDefaults standardUserDefaults];
  return [defaults boolForKey:TljBkPosWillAcceptCreditCards];
}

//******************************************************************************

- (double)loadDefaultStandTimeRate {
  NSUserDefaults *defaults;
  defaults = [NSUserDefaults standardUserDefaults];
  return [[defaults objectForKey:TljBkPosStandTimeRateKey] doubleValue];
}

//******************************************************************************

- (NSString *)loadDefaultPathToLatex {
  NSUserDefaults *defaults;
  defaults = [NSUserDefaults standardUserDefaults];
  return [defaults objectForKey:TljBkPosPathToLatexKey];
}
//******************************************************************************

- (NSMutableArray *)loadDefaultMembershipInformation {
  NSUserDefaults *defaults;
  defaults = [NSUserDefaults standardUserDefaults];
  
  MembershipInformation *cook;
  MembershipInformation *lifetime;
  MembershipInformation *regular;
  MembershipInformation *deluxe;
  
  NSData *cookAsData = [defaults objectForKey:TljBkPosCookMembershipInfo];
  NSData *lifetimeAsData = [defaults objectForKey:TljBkPosLifetimeMembershipInfo];
  NSData *regularAsData = [defaults objectForKey:TljBkPosRegularMembershipInfo];
  NSData *deluxeAsData = [defaults objectForKey:TljBkPosDeluxeMembershipInfo];
  
  cook = [NSKeyedUnarchiver unarchiveObjectWithData:cookAsData];
  lifetime = [NSKeyedUnarchiver unarchiveObjectWithData:lifetimeAsData];
  regular = [NSKeyedUnarchiver unarchiveObjectWithData:regularAsData];
  deluxe = [NSKeyedUnarchiver unarchiveObjectWithData:deluxeAsData];
  
//  [self startObservingMembershipInformation:cook];
//  [self startObservingMembershipInformation:lifetime];
//  [self startObservingMembershipInformation:regular];
//  [self startObservingMembershipInformation:deluxe];
  
  
  NSMutableArray *mia = [[NSMutableArray alloc] init];
  [mia addObject:cook];
  [mia addObject:lifetime];
  [mia addObject:regular];
  [mia addObject:deluxe];
  NSMutableArray *returnVal = [NSMutableArray arrayWithArray:mia];
  [mia release];
  return returnVal;
}


//******************************************************************************

- (void)startObservingMembershipInformation:(MembershipInformation *)info {
  [info addObserver:self 
         forKeyPath:@"membershipType"
            options:NSKeyValueObservingOptionOld
            context:NULL];
  
  [info addObserver:self 
         forKeyPath:@"durationInDays"
            options:NSKeyValueObservingOptionOld
            context:NULL];
  
  [info addObserver:self 
         forKeyPath:@"discountOnNewParts"
            options:NSKeyValueObservingOptionOld
            context:NULL];
  
  [info addObserver:self 
         forKeyPath:@"discountOnWorkshops"
            options:NSKeyValueObservingOptionOld
            context:NULL];  
  
  [info addObserver:self 
         forKeyPath:@"priceOfMembership"
            options:NSKeyValueObservingOptionOld
            context:NULL];    
}

//******************************************************************************

- (void)stopObservingMembershipInformation:(MembershipInformation *)info {
  [info removeObserver:self forKeyPath:@"membershipType"];
  [info removeObserver:self forKeyPath:@"durationInDays"];
  [info removeObserver:self forKeyPath:@"discountOnNewParts"];
  [info removeObserver:self forKeyPath:@"discountOnWorkshops"];
  [info removeObserver:self forKeyPath:@"priceOfMembership"];
}

//******************************************************************************

- (void)changeKeyPath:(NSString *)keyPath ofObject:(id)obj toValue:(id)newValue {
  // setValue:forKeyPath: will cause the key-value observing method
  // to be called, which takes care of the undo stuff
  [obj setValue:newValue forKeyPath:keyPath];
}

//******************************************************************************

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object 
                        change:(NSDictionary *)change context:(void *)context {
  NSUndoManager *undo = [[self window] undoManager];
  id oldValue = [change objectForKey:NSKeyValueChangeOldKey];
  //NSLog(@"oldValue = %@", oldValue);
  [[undo prepareWithInvocationTarget: self] changeKeyPath:keyPath
                                                 ofObject:object
                                                  toValue:oldValue];
  [undo setActionName:@"Edit"];  
}

//******************************************************************************
// handlers
//******************************************************************************

- (void) textDidChange:(NSNotification *)note {
  if ([[self window] isKeyWindow]) {
    
    id obj = [note object];
    if (obj == startingBalanceTextField) {
      if (startingBookAmount != [startingBalanceTextField doubleValue]) {
        [saveStartingBalanceButton setEnabled:YES];
      } else {
        [saveStartingBalanceButton setEnabled:NO];
      }
    } else if (obj == salesTaxTextField) {
      if (salesTax != [salesTaxTextField doubleValue]) {
        [saveSalesTaxButton setEnabled:YES];
      } else {
        [saveSalesTaxButton setEnabled:NO];
      }
    } else if (obj == pathToLatexTextField) {
      if ([pathToLatex isEqualToString:[pathToLatexTextField stringValue]]) {
        [savePathToLatexButton setEnabled:NO];
      } else {
        [savePathToLatexButton setEnabled:YES];
      }
    } else if (obj == standTimeRateTextField) {
      if (standTimeRate == [standTimeRateTextField doubleValue]) {
        [saveStandTimeRateButton setEnabled:NO];
      } else {
        [saveStandTimeRateButton setEnabled:YES];
      }
    } else {
      NSArray *selected = [membershipInformationArrayController selectedObjects];
      if ([selected count] > 0) {
        MembershipInformation *tmp = (MembershipInformation *)[selected objectAtIndex:0];
        if (tmp != nil) {
          int orgDuration = [tmp durationInDays];
          int newDuration = [durationTextField intValue];
          double orgPrice = [tmp priceOfMembership];
          double newPrice = [priceTextField doubleValue];
          double orgNew = [tmp discountOnNewParts];
          double newNew = [newPartsDiscountTextField doubleValue];
          double orgWork = [tmp discountOnNewParts];
          double newWork = [workshopDiscountTextField doubleValue];
          
          if (orgDuration != newDuration || orgPrice != newPrice ||
              orgNew != newNew || orgWork != newWork) {
            [saveMembershipInformationButton setEnabled:YES];
            [cancelMembershipEditButton setEnabled:YES];
          } else {
            [saveMembershipInformationButton setEnabled:NO];
            [cancelMembershipEditButton setEnabled:NO];
          }
        }
      }
    }
  }
}

//******************************************************************************

- (void)handleMembershipInformationClicked:(id)sender {
  NSArray *selected = [membershipInformationArrayController selectedObjects];
  if ([selected count] > 0) {
    MembershipInformation *tmp = (MembershipInformation *)[selected objectAtIndex:0];
    if (tmp != nil) {
      [membershipTypeTextField setStringValue:[tmp membershipType]];
      [durationTextField setIntValue:[tmp durationInDays]];
      [priceTextField setDoubleValue:[tmp priceOfMembership]];
      [newPartsDiscountTextField setDoubleValue:[tmp discountOnNewParts]];
      [workshopDiscountTextField setDoubleValue:[tmp discountOnWorkshops]];
    }
  }
}

//******************************************************************************

- (void)handleTableViewSelectionDidChange:(NSNotification *)note {
  [self handleMembershipInformationClicked:self];
  
}
//******************************************************************************
// accessors and setters
//******************************************************************************

- (double)salesTax {
  return salesTax;
}
- (void) setSalesTax:(double)arg {
  [[NSUserDefaults standardUserDefaults] setObject:[NSNumber numberWithDouble:arg]
                                            forKey:TljBkPosSalesTaxRate];
  salesTax = arg;
}
- (double)startingBookAmount {
  return startingBookAmount;
}
- (void) setStartingBookAmount:(double)arg {
 
  [[NSUserDefaults standardUserDefaults] setObject:[NSNumber numberWithDouble:arg]
                                            forKey:TljBkPosStartingBookAmount];

  startingBookAmount = arg;
}

- (bool)willAcceptCreditCards {
  return willAcceptCreditCards;
}
- (void) setWillAcceptCreditCards:(bool)arg {
  //NSLog(@"in set will accept credit cards: %d", arg);
  [[NSUserDefaults standardUserDefaults] setBool:arg 
                                          forKey:TljBkPosWillAcceptCreditCards];

  willAcceptCreditCards = arg;
}

- (NSMutableArray *)membershipInformationArray {
  return membershipInformationArray;
}

- (void) setMembershipInformationArray:(NSArray *)arg {
  if (arg != membershipInformationArray) {
    NSEnumerator *enumerator = [membershipInformationArray objectEnumerator];
    id value;
    while ((value = [enumerator nextObject])) {
      [self stopObservingMembershipInformation:value];
    }
    [membershipInformationArray release];
    membershipInformationArray = [arg mutableCopy];
    enumerator = [membershipInformationArray objectEnumerator];
    while ((value = [enumerator nextObject])) {
      [self startObservingMembershipInformation:value];
    }
  }
}

- (double)standTimeRate {
  return standTimeRate;
}
- (void) setStandTimeRate:(double)arg {
  //NSLog(@"in set will accept credit cards: %d", arg);
  [[NSUserDefaults standardUserDefaults] setObject:[NSNumber numberWithDouble:arg]
                                          forKey:TljBkPosStandTimeRateKey];  
  standTimeRate = arg;
}
- (NSString *)pathToLatex {
  return pathToLatex;
}
- (void) setPathToLatex:(NSString *)arg {
  arg = [arg copy];
  [pathToLatex release];
  [[NSUserDefaults standardUserDefaults] setObject:arg
                                            forKey:TljBkPosPathToLatexKey];  

  pathToLatex = arg;
}


//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
     NSNotificationCenter *nc;
     nc = [NSNotificationCenter defaultCenter];

     [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:salesTaxTextField];
    
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:startingBalanceTextField];

      
    [nc addObserver:self 
           selector:@selector(handleTableViewSelectionDidChange:)
               name:NSTableViewSelectionDidChangeNotification
             object:membershipInformationTableView];
    
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:durationTextField];
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:priceTextField];
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:newPartsDiscountTextField];
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:workshopDiscountTextField];
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:cancelMembershipEditButton];
    
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:pathToLatexTextField];
    
    [nc addObserver:self
           selector:@selector(textDidChange:)
               name:NSControlTextDidChangeNotification
             object:standTimeRateTextField];
    
}
@end