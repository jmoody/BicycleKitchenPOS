// 
// CreateInvoice.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "CreateInvoice.h"
#import "People.h"
#import "Projects.h"
#import "Products.h"
#import "ProductCategory.h"
#import "ProductCategories.h"
#import "MembershipInformation.h"
#import "PreferenceController.h"

@implementation CreateInvoice

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"Invoice"];
    previousLengthOfProductsSearchString = 0;
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  [productsArray release];
  [invoiceItemsArray release];
  [person release];
  [product release];
  [invoiceItem release];
  [project release];
  [payInvoiceController release];
  //[projectController release];
  [categories release];
  //[peopleController release];
  [clientSelector release];
  [projectSelector release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)windowDidLoad {
   [super windowDidLoad];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForModal {
   [super setupForModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForNonModal {
   [super setupForNonModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)runModalWithParent:(NSWindow *) parent {
   [super runModalWithParent:parent];
}


//******************************************************************************
// setup
//******************************************************************************

- (void)setupButtons {
  [priceStepper setDoubleValue:0.0];
  [quantityStepper setIntValue:1];
  [payInvoiceButton setEnabled:NO];
  // enable this after the product controller has run
  [addProjectButton setEnabled:NO];
  [applyDiscountButton setState:0];
}

//******************************************************************************

- (void)setupTextFields {
  [priceTextField setDoubleValue:0.0];
  [quantityStepper setIntValue:1];
  [quantityTextField setIntValue:1];
  [priceOrStandTimeTextField setStringValue:@"Price"];
  [self clearTextField:productsSearchField];
  // set the window title to "Invoice for: "
  // and reset after person controller has run
  [[self window] setTitle:[NSString stringWithFormat:@"Invoice for: %@", @"nobody"]];  
}

//******************************************************************************

- (void)setupTables {
  ////NSLog(@"in setup table views and browser");
  [productsTableView setTarget:self];
  [productsTableView setDoubleAction:@selector(handleProductsClicked:)];
  //[productsTableView setAction:@selector(handleProductsClicked:)];
  [self setProductsArray:[[Products sharedInstance] arrayForDictionary]];
  
  // collect the sorted categories and products
  [self setCategories:[[ProductCategories sharedInstance] arrayForBrowserFromProducts:[[Products sharedInstance] dictionary]]];
  // force a refresh of the browser
  [categoriesTreeController setContent:nil];
  [categoriesTreeController setContent:categories];
  
  [categoryBrowser setTarget:self];
  [categoryBrowser setDoubleAction:@selector(handleCategoryClicked:)];
  // must have this exactly here
  [categoryBrowser setMinColumnWidth:150.0];
  
  [categoryBrowser setWidth:150.0 ofColumn:0];
  // the max is set in the ib
  // here is the deal.  figure out the max column
  // width, set it in the ib and then set it again
  // here.
  // in the ib set the column resizing to None.
  [categoryBrowser setWidth:350.0 ofColumn:1];
  [categoryBrowser setMaxVisibleColumns:2];
  
  [categoryBrowser setMinColumnWidth:150.0];
  [categoryBrowser setWidth:150.0 ofColumn:0];
  
  
  [invoiceItemsTableView setTarget:self];
  [invoiceItemsTableView setDoubleAction:@selector(handleInvoiceItemsClicked:)];
  [invoiceItemsTableView setAction:@selector(handleInvoiceItemsClicked:)];
  NSArray *tmp = [[NSArray alloc] init];
  [self setInvoiceItemsArray:tmp];
  [tmp release];
}

//******************************************************************************

- (void)setupProductsAndCategoriesDoubleActions {
  [productsTableView setTarget:self];
  [productsTableView setDoubleAction:@selector(handleProductsClicked:)];
  //[productsTableView setAction:@selector(handleProductsClicked:)];
  [categoryBrowser setTarget:self];
  [categoryBrowser setDoubleAction:@selector(handleCategoryClicked:)];
  [invoiceItemsTableView setTarget:self];
  [invoiceItemsTableView setDoubleAction:@selector(handleInvoiceItemsClicked:)];
  [invoiceItemsTableView setAction:@selector(handleInvoiceItemsClicked:)];
}


//******************************************************************************

- (void)setupStateVariables {
  [self setPerson:nil];
  [self setProduct:nil];
  [self setProject:nil];
  [self setInvoiceItem:nil];
}


//******************************************************************************
// button actions
//******************************************************************************

- (IBAction)addProjectButtonClicked:(id)sender {
  //NSLog(@"addProjectButton clicked");
  //NSLog(@"add project button clicked");
  // what to do about projects?
  // 1. add remaining balance as project line item
  // 2. loop through the unpaid invoices and collect
  // the products, adding each on as a line item
  // 3. sum all the stand times - this means don't allow
  //    stand time to be added when adding invoice to project?  
  //NSString *message = @"Adding a project to an invoice adds the bicycle\n and ALL the items from all the unpaid invoices.";
  //int choice = NSRunAlertPanel(@"Adding Project To Invoice",message,@"Continue",@"Cancel",nil);
  int choice = 1;
  if (choice != 0) {
    if (projectSelector == nil) {
      ProjectSelector *tmp = [[ProjectSelector alloc] init];
      [self setProjectSelector:tmp];
      [tmp release];
    }
    
    [projectSelector setupForModal];
    [projectSelector setPerson:[self person]];
    [projectSelector setupTables];
    [projectSelector runModalWithParent:[self window]];
    Project *p = [projectSelector project];
    //NSLog(@"project = %@", p);
    if (p != nil) {
      [self setProject:p];
      NSMutableArray *unpaidProducts = [p productsInInvoice];
      unsigned int i, count = [unpaidProducts count];
      for (i = 0; i < count; i++) {
        Product *prod = (Product *)[unpaidProducts objectAtIndex:i];
        [self addInvoiceItem:prod];
      }
    }
  } else {
    // something about canceling causes the actions to get messed up
    [self setupProductsAndCategoriesDoubleActions];
  }
}

//******************************************************************************

- (IBAction)applyDiscountButtonClicked:(id)sender {
  //NSLog(@"applyDiscountButton clicked");
  bool applyDiscount = [self applyDiscountButtonChecked];
  
  // apply discount to discountable items in invoice
  unsigned int i, count = [invoiceItemsArray count];
  double percentDiscount = 0.0;
  double sum = 0.0;
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([p taxable]) {
      if (applyDiscount && [p taxable]) {
        percentDiscount = 0.1;
      } else {
        percentDiscount = 0.0;
      }
    }
    double price = [p productPrice];
    int quantity = [p productQuantity];
    double totalBeforeDiscount = 1.0 * quantity * price;
    double total = round(totalBeforeDiscount * (1.0 - percentDiscount));
    double discount = totalBeforeDiscount - total;
    [p setProductDiscount:discount];
    [p setProductTotal:total];
    sum = sum + total;
  } 
  [totalTextField setDoubleValue:sum];
}

//******************************************************************************

- (IBAction)payInvoiceButtonClicked:(id)sender {
  //NSLog(@"payInvoiceButton clicked");
  Invoice *inv = [self makeInvoice];
  // here is the run order
  // setCurrentlyViewedPerson
  // setCurrentInvoice - requires that an invoice is made in InvoiceController
  // with date, nonMemberDiscountGiven, nonMemberDiscountAmount, invoiceItems,
  // and projectInInvoice 
  // runModalWithParent
  if (payInvoiceController == nil) {
    PayInvoiceController *pic = [[PayInvoiceController alloc] init];
    [self setPayInvoiceController:pic];
    [pic release];
  }
  [payInvoiceController setPerson:[self person]];
  [payInvoiceController setInvoice:inv];
  // requires a release
  [inv release];
  // might need a setupForModal here - not sure - yup definitely need it
  [payInvoiceController setupForModal];
  [payInvoiceController runModalWithParent:[self window]];
  
  // wait for the return
  Invoice *inv2 = [payInvoiceController invoice];
  // the pay invoice controller will close this window if payment is successful
  if ([inv2 invoicePaid]) {
    if (runningModal) {
      [self stopModalAndCloseWindow];
    } else {
      [[self window] close];
    }
  }
}

//******************************************************************************

- (IBAction)priceStepperClicked:(id)sender {
  //NSLog(@"priceStepper clicked");
 
  if ([self itemIsStand:[self invoiceItem]]) {
    double hours = [priceStepper doubleValue];
    double newPrice = round(hours * [self priceOfStandTime]);
    double percentDiscount;
    if ([self personIsMember]) {
      percentDiscount = 1.0;
    } else {
      percentDiscount = 0.0;
    }
    double totalBeforeDiscount = newPrice;
    double total = round(totalBeforeDiscount * (1.0 - percentDiscount));
    double discount = totalBeforeDiscount - total;
    [priceTextField setDoubleValue:hours];
    [invoiceItem setProductDiscount:discount];
    [invoiceItem setProductPrice:newPrice];
    [invoiceItem setProductTotal:total];
  } else {
        // applyDiscount refers to applyDiscountButton
    double value = [priceStepper doubleValue];
    double originalPrice = [invoiceItem productPrice];
    double newPrice;
    double delta = [priceStepper increment];
    if (value > originalPrice) {
      newPrice = originalPrice + delta;
    } else if (value <= 0.0) {
      newPrice = 0.0;
    } else {
      newPrice = originalPrice - delta;
    }
    [priceTextField setDoubleValue:newPrice];
    [invoiceItem setProductPrice:newPrice];
    int quantity = [invoiceItem productQuantity];
    double percentDiscount = 0.0;
    if ([self personIsMember]) {
      NSString *mt = [person memberType];
      ////NSLog(@"mt: %@", mt);
      NSData *mid =  [[NSUserDefaults standardUserDefaults] objectForKey:mt];
      ////NSLog(@"mid: %@", mid);
      MembershipInformation *mi = [NSKeyedUnarchiver unarchiveObjectWithData:mid];
      ////NSLog(@"mi: %@", mi);
      if ([self itemIsWorkshop:[self invoiceItem]]) {
        percentDiscount = [mi discountOnWorkshops] * .01;
      } else if ([invoiceItem taxable]) {
        percentDiscount = [mi discountOnNewParts]  * .01;
      }
    } else if ([self applyDiscountButtonChecked] && [invoiceItem taxable]) {
    percentDiscount = 0.1;
    }
    double totalBeforeDiscount = 1.0 * quantity * newPrice;
    double total = round(totalBeforeDiscount * (1.0 - percentDiscount));
    double discount = totalBeforeDiscount - total;
    [invoiceItem setProductDiscount:discount];
    [invoiceItem setProductTotal:total];
  }
  double sum = 0.0;
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *prod = (Product *)[invoiceItemsArray objectAtIndex:i];
    sum = sum + [prod productTotal];
  }
  [totalTextField setDoubleValue:sum];
  [invoiceItemsTableView reloadData];
}

//******************************************************************************

- (IBAction)quantityStepperClicked:(id)sender {
  //NSLog(@"quantityStepper clicked");
  if ([self itemIsProject:[self invoiceItem]]) {
    NSString *message = [NSString stringWithFormat:@"Only one project per invoice."];
    NSRunAlertPanel(@"Operation not permitted.", message,@"Continue",nil,nil);
  } else if ([self itemIsStand:[self invoiceItem]]) {
    NSString *message = [NSString stringWithFormat:@"To increase the amount of stand time\nuse the PRICE Stepper button."];
    NSRunAlertPanel(@"Operaton not permitted.",message,@"Continue",nil,nil);
  } else if ([self itemIsDonation:[self invoiceItem]]) {
    NSString *message = [NSString stringWithFormat:@"Use PRICE Stepper to increase donation."];
    NSRunAlertPanel(@"Operation not permitted.", message,@"Continue",nil,nil);
  } else if ([self itemIsMembership:[self invoiceItem]]) {
    NSString *message = [NSString stringWithFormat:@"Only one Membership per invoice."];
    NSRunAlertPanel(@"Operation not permitted.", message,@"Continue",nil,nil);
  } else {
    double newQuantity = [quantityStepper intValue];
    if (newQuantity <= 0) {
      newQuantity = 1;
      [quantityStepper setIntValue:1];
    }
    [quantityTextField setIntValue:newQuantity];
    [invoiceItem setProductQuantity:newQuantity];
    double price = [invoiceItem productPrice];
    double percentDiscount = 0.0;
    if ([invoiceItem taxable]) {
      if ([self applyDiscountButtonChecked]) {
        percentDiscount = 0.1;
      } else if ([self personIsMember]) {
        NSString *mt = [person memberType];
        ////NSLog(@"mt: %@", mt);
        NSData *mid =  [[NSUserDefaults standardUserDefaults] objectForKey:mt];
        ////NSLog(@"mid: %@", mid);
        MembershipInformation *mi = [NSKeyedUnarchiver unarchiveObjectWithData:mid];
        ////NSLog(@"mi: %@", mi);
        if ([self itemIsWorkshop:[self invoiceItem]]) {
          percentDiscount = [mi discountOnWorkshops] * .01;
        } else {
          percentDiscount = [mi discountOnNewParts] * .01;
        }
      }
    }
    double totalBeforeDiscount = 1.0 * newQuantity * price;
    double total = round(totalBeforeDiscount * (1.0 - percentDiscount));
    double discount = totalBeforeDiscount - total;
    [invoiceItem setProductDiscount:discount];
    [invoiceItem setProductTotal:total];
    
    double sum = 0.0;
    unsigned int i, count = [invoiceItemsArray count];
    for (i = 0; i < count; i++) {
      Product *prod = (Product *)[invoiceItemsArray objectAtIndex:i];
      sum = sum + [prod productTotal];
    }
    [totalTextField setDoubleValue:sum];
    [invoiceItemsTableView reloadData];
  }
}

//******************************************************************************

- (IBAction)deleteButtonClicked:(id)sender {
  //NSLog(@"deleteButton clicked");
  NSArray *selected = [invoiceItemsArrayController selectedObjects];
  if ([selected count] > 0) {
    Product *tmp = [selected objectAtIndex:0];
    if (tmp != nil) {
      [self setInvoiceItem:tmp];
      if ([self itemIsProject:[self invoiceItem]]) {
        int choice; 
        choice = NSRunAlertPanel(@"Deleting Project",
                                 @"Deleting a project will remove all the products associated with project",
                                 @"Continue",@"Cancel",nil);
        if (choice == 1) {
          // remove the project
          NSMutableArray *newItems = [[NSMutableArray alloc] init];
          NSArray *itemsToRemoveOrDecf = [project productsInInvoice];
        
          unsigned int i, count = [invoiceItemsArray count];
          for (i = 0; i < count; i++) {
            bool keepItem = YES;
            Product *itemInInvoice = (Product *)[invoiceItemsArray objectAtIndex:i];
            NSString *iiiUid = [itemInInvoice uid];
            unsigned int j, count2 = [itemsToRemoveOrDecf count];
            for (j = 0; j < count2; j++) {
              Product *productInInvoice = [itemsToRemoveOrDecf objectAtIndex:i];
              NSString *piiUid = [productInInvoice uid];
              if ([iiiUid isEqualToString:piiUid]) {
                int iiiQuantity = [itemInInvoice productQuantity];
                int piiQuantity = [productInInvoice productQuantity];
                int newQuantity = iiiQuantity = piiQuantity;
                if (newQuantity <= 0) {
                  keepItem = NO;
                } else {
                  [itemInInvoice setProductQuantity:newQuantity];
                }
              }
            }
            if (keepItem) {
              [newItems addObject:itemInInvoice];
            }
          }
          [self setInvoiceItemsArray:newItems];
          [newItems release];
          [invoiceItemsTableView reloadData];
          [self setProject:nil];
        } else {
          // no op
          return;
        }
      } else {
        int index = [invoiceItemsArrayController selectionIndex];
        [self removeObjectFromInvoiceItemsArrayAtIndex:index];
        //        NSString *aUid = [invoiceItem uid];
        //        NSPredicate *predicate = [NSPredicate predicateWithFormat:@"!(SELF like %@)", aUid];
        //        NSArray *newItems = [invoiceItemsArray filteredArrayUsingPredicate:predicate];
        //        [self setInvoiceItemsArray:newItems];
        // don't bother selecting the next item, we'll let the steppers always
        // handling selecting the currently highlighted item, just reset the textfields
        //        [priceStepper setDoubleValue:0.0];
        //        [quantityStepper setIntValue:1.0];
        //        [priceTextField setDoubleValue:0.0];
        //        [quantityTextField setIntValue:1.0];
        [invoiceItemsTableView reloadData];
      }
      // reset the total
      double sum = 0.0;
      unsigned int i, count = [invoiceItemsArray count];
      for (i = 0; i < count; i++) {
        Product *prod = (Product *)[invoiceItemsArray objectAtIndex:i];
        sum = sum + [prod productTotal];
      }
      [totalTextField setDoubleValue:sum];
      [invoiceItemsTableView reloadData];
      // enable the pay button
      [self enablePayInvoiceButtonAppropriately];
      [self enableAddProjectButtonAppropriately];
    }
  }
}

//******************************************************************************

- (IBAction)cancelButtonClicked:(id)sender {
  //NSLog(@"cancelButton clicked");
  // not any more - this was for times viewed caching
  // [[ProductCategories sharedInstance] saveToDisk];
  [[self window] close];
}

//******************************************************************************

- (IBAction)addStandTimeButtonClicked:(id)sender {
  //NSLog(@"addStandTimeButton clicked");
  Product *stand = [[Products sharedInstance] productForProductCode:@"stand"];
  if ([self productAddableP:stand]) {
    [self addInvoiceItem:stand];
  }
}

//******************************************************************************

- (IBAction)addDonationButtonClicked:(id)sender {
  //NSLog(@"addDonationButton clicked");
  Product *don = [[Products sharedInstance] productForProductCode:@"donation"];
  if ([self productAddableP:don]) {
    [self addInvoiceItem:don];
  }
}


//******************************************************************************
// misc
//******************************************************************************

- (void)enableAddProjectButtonAppropriately {
  if ([self personIsQuickSale] || (project != nil)) {
    [addProjectButton setEnabled:NO];
  } else {
    NSMutableArray *projectsForPerson = [[Projects sharedInstance] objectsForUids:[person projectUids]];
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"isFinished == NO"];
    NSArray *unfinishedProjects = [projectsForPerson filteredArrayUsingPredicate:predicate];
    if ([unfinishedProjects count] > 0) {
      [addProjectButton setEnabled:YES];
    } else {
      [addProjectButton setEnabled:NO];
    }
  }
}

//******************************************************************************

- (void)enablePayInvoiceButtonAppropriately {
  // could be trouble if invoice total is zero?
  if ([invoiceItemsArray count] > 0) {
    [payInvoiceButton setEnabled:YES];
  } else {
    [payInvoiceButton setEnabled:NO];
  }
}

//******************************************************************************

- (void)enableApplyDiscountButtonAppropriately {
  if ([self personIsMember]) {
    [applyDiscountButton setEnabled:NO];
  } else {
    [applyDiscountButton setEnabled:YES];
  }
}

//******************************************************************************

- (bool)itemsContainsDonationP {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([[p productCode] isEqualToString:@"donation"]) {
      return YES;
    }
  }
  return NO;
}

//******************************************************************************

- (Product *)projectInItems {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([[p productCode] isEqualToString:@"project"]) {
      return p;
    }
  }
  return nil;
}

//******************************************************************************

- (bool)itemsContainsMembershipP {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    NSString *cat = [p productCategory];
    if ([cat isEqualToString:@"Memberships"]) {
      return YES;
    }
  }
  return NO;
}

//******************************************************************************

- (Product *)membershipInItems {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    NSString *cat = [p productCategory];
    if ([cat isEqualToString:@"Memberships"]) {
      return p;
    }
  }
  return nil;
}

//******************************************************************************

- (bool)itemsContainsProjectP {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([[p productCategory] isEqualToString:@"project"]) {
      return YES;
    }
  }
  return  NO;
}

//******************************************************************************

- (bool)itemIsStand:(Product *)item  {
  return [[item productCode] isEqualToString:@"stand"];
}

//******************************************************************************

- (bool)itemsContainsStandP {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([[p productCode] isEqualToString:@"stand"]) {
      return YES;
    }
  }
  return NO;
}

//******************************************************************************

- (Product *)standTimeInItems {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([[p productCode] isEqualToString:@"stand"]) {
      return p;
    }
  }
  return nil;
}

//******************************************************************************

- (bool)itemIsProject:(Product *)item {
  return [[item productCode] isEqualToString:@"project"];
}

//******************************************************************************

- (bool)itemIsDonation:(Product *)item {
  return [[item productCode] isEqualToString:@"donation"];
}

//******************************************************************************

- (Product *)donationInInvoice {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([[p productCode] isEqualToString:@"donation"]) {
      return p;
    }
  }
  return nil;
}

//******************************************************************************

- (bool)itemIsWorkshop:(Product *)item {
  return [[item productCategory] isEqualToString:@"Workshops"];
}

//******************************************************************************

- (Product *)workshopInInvoice {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    NSString *cat = [p productCategory];
    if ([cat isEqualToString:@"Workshops"]) {
      return p;
    }
  }
  return nil;
}

//******************************************************************************

- (bool)itemIsMembership:(Product *)item {
  return [[item productCategory] isEqualToString:@"Memberships"];
}

//******************************************************************************

- (bool)personIsQuickSale {
  if ([[person personName] isEqualToString:@"quick sale"]) {
    return YES;
  } else {
    return NO;
  }
}

//******************************************************************************

- (bool)personIsMember {
  return [person isMember];
}

//******************************************************************************

- (Invoice *)makeInvoice {
  // sets the date field to today
  Invoice *newInvoice = [[Invoice alloc] init];
  [newInvoice setPersonUid:[person uid]];
  [newInvoice setItems:invoiceItemsArray];
  [newInvoice setInvoicePaid:NO];
  [newInvoice setInvoiceTotal:[totalTextField doubleValue]];
  
  
  // discounts
  [newInvoice setNonMemberDiscountGivenP:[self applyDiscountButtonChecked]];
  double sumOfNonMemberDiscounts = 0.0;

  if ([self applyDiscountButtonChecked]) {
    unsigned int i, count = [invoiceItemsArray count];
    for (i = 0; i < count; i++) {
      Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
      if ([p taxable]) {
        sumOfNonMemberDiscounts = sumOfNonMemberDiscounts + [p productDiscount];
      }
    }
  }
  
  [newInvoice setAmountOfNonMemberDiscountGiven:sumOfNonMemberDiscounts];
  double sumOfMemberDiscounts = 0.0;
  if ([self personIsMember]) {
    unsigned int j, count = [invoiceItemsArray count];
    for (j = 0; j < count; j++) {
      Product *prod = (Product *)[invoiceItemsArray objectAtIndex:j];
      sumOfMemberDiscounts = sumOfMemberDiscounts + [prod productDiscount];
    }
  }
  if (sumOfMemberDiscounts != 0.0) {
    [newInvoice setMemberDiscountGivenP:YES];
  }
  
  [newInvoice setAmountOfMemberDiscountGiven:sumOfMemberDiscounts];

  //stand time
  double standTimeTotal = 0.0;
  if ([self itemsContainsStandP]) {
    Product *stand = [self productForCode:@"stand"];
    // price of stand time is always at least $1.00
    standTimeTotal = standTimeTotal + ([stand productPrice] / [self priceOfStandTime]);
  }
  
  if ([self itemsContainsProjectP]) {
    double hours = [project standTime];
    standTimeTotal = standTimeTotal + hours;
  }
  
  [newInvoice setHoursOfStandTime:standTimeTotal];
  
  
  // taxes
  double taxableAmount = [self computeTaxableAmount];
  ////NSLog(@"taxableAmount: %f", taxableAmount);
  double nontaxableAmount = [self computeNonTaxableAmount];
  ////NSLog(@"nontaxableAmount: %f", nontaxableAmount);
  double tax = [self computeTaxOwed:taxableAmount];
  ////NSLog(@"tax: %f", tax);
  [newInvoice setTotalTaxableAmount:taxableAmount];
  [newInvoice setTotalNonTaxableAmount:nontaxableAmount];
  [newInvoice setTaxOwed:tax]; 
  //[newInvoice autorelease];
  return newInvoice;

}

//******************************************************************************

- (double)totalInvoiceAmount {
  double sum = 0.0;
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *prod = (Product *)[invoiceItemsArray objectAtIndex:i];
    sum = sum + [prod productTotal];
  }
  return sum;
}

//******************************************************************************

- (double)totalDiscounts {
  double sum = 0.0;
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *prod = (Product *)[invoiceItemsArray objectAtIndex:i];
    sum = sum + [prod productDiscount];
  }
  return sum;
}

//******************************************************************************

- (double)computeTaxOwed:(double)taxableAmount {
  double taxRate = [[[NSUserDefaults standardUserDefaults] objectForKey:TljBkPosSalesTaxRate] doubleValue] * .01;
  return taxableAmount * taxRate;
}

//******************************************************************************

- (double)computeTaxableAmount {
  double sum = 0.0;
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *prod = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([prod taxable]) {
      sum = sum + [prod productTotal];
    }
  }  
  return  sum;
}

//******************************************************************************

- (double)computeNonTaxableAmount {
  double sum = 0.0;
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *prod = (Product *)[invoiceItemsArray objectAtIndex:i];
    if (![prod taxable]) {
      sum = sum + [prod productTotal];
    }
  }  
  return  sum;  
}

//******************************************************************************

- (void)addInvoiceItem:(Product *)p {

  Product *pcopy = [[Product alloc] init];
  [pcopy setUid:[p uid]];
  [pcopy setDisplayName:[p displayName]];
  [pcopy setProductName:[p productName]];
  [pcopy setProductCategory:[p productCategory]];
  [pcopy setProductCode:[p productCode]];
  [pcopy setTaxable:[p taxable]];
  [pcopy setProductPrice:[p productPrice]];
  [pcopy setProductQuantity:1];
  
  // don't reverse this order
  [self setInvoiceItem:pcopy];
  if ([self itemIsStand:pcopy]) {
    [priceStepper setIncrement:0.25];
    [priceStepper setMinValue:0.25];
    double currentPrice = [invoiceItem productPrice];
    // price of stand time is always at least $1.00
    double newPrice = currentPrice / [self priceOfStandTime];
    [priceStepper setDoubleValue:newPrice];
    [priceTextField setDoubleValue:newPrice];
    [priceOrStandTimeTextField setStringValue:@"Hours of Stand Time:"];
    NSNumberFormatter *formatter = [priceTextField formatter];
    [formatter setFormat:@"##0.00"];
  } else {
    double price = [invoiceItem productPrice];
    int quantity = [invoiceItem productQuantity];
    
    [quantityStepper setIntValue:quantity];
    [quantityTextField setIntValue:quantity];
    
    [priceStepper setDoubleValue:price];
    [priceTextField setDoubleValue:price];
    
    [priceStepper setIncrement:1.0];
    [priceStepper setMinValue:0.0];
    [priceOrStandTimeTextField setStringValue:@"Price:"];
    NSNumberFormatter *formatter = [priceTextField formatter];
    [formatter setFormat:@"$#,##0.00"];
  }
  
  // apply discount
  double percentDiscount = 0.0;
  if ([self personIsMember]) {
    NSString *mt = [person memberType];
    //NSLog(@"mt: %@", mt);
    NSData *mid =  [[NSUserDefaults standardUserDefaults] objectForKey:mt];
    //NSLog(@"mid: %@", mid);
    MembershipInformation *mi = [NSKeyedUnarchiver unarchiveObjectWithData:mid];
    //NSLog(@"mi: %@", mi);
    if ([self itemIsWorkshop:[self invoiceItem]]) {
      percentDiscount = [mi discountOnWorkshops] * .01;
    } else if ([self itemIsStand:[self invoiceItem]]) {
      percentDiscount = 1.0;
    } else if ([invoiceItem taxable]) {
      percentDiscount = [mi discountOnNewParts]  * .01;
    }
  } else if ([self applyDiscountButtonChecked] && [invoiceItem taxable]) {
    percentDiscount = 0.1;
  }
  
  double price = [pcopy productPrice];
  double total = round(1.0 * price * (1.0 - percentDiscount));
  double discount = price - total;
  [pcopy setProductDiscount:discount];
  [pcopy setProductTotal:total];
  
  // adds it to the end and automagically sets it as the "selected" invoice item
  [invoiceItemsArrayController insertObject:pcopy atArrangedObjectIndex:[invoiceItemsArray count]];
  [invoiceItemsTableView reloadData]; 
  
  double sum = 0.0;
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *prod = (Product *)[invoiceItemsArray objectAtIndex:i];
    sum = sum + [prod productTotal];
  }
  [totalTextField setDoubleValue:sum];
  [invoiceItemsTableView reloadData];
  // enable the pay button
  [self enablePayInvoiceButtonAppropriately];
  [self enableAddProjectButtonAppropriately];
  [pcopy release];
}

//******************************************************************************

- (void)insertObject:(Product *)p inInvoiceItemsArrayAtIndex:(int)index {
  ////NSLog(@"insertObject inInvoicesAtIndex");
  //Add the inverse of this operaton to the undo stack
  NSUndoManager *undo = [[self window] undoManager];
  [[undo prepareWithInvocationTarget:self]
    removeObjectFromInvoiceItemsArrayAtIndex:index];
  if (![undo isUndoing]) {
    [undo setActionName:@"Add Item"];
  }  
  // [self startObservingProduct:p];
  [invoiceItemsArray insertObject:p atIndex:index];
}

//******************************************************************************

- (void)removeObjectFromInvoiceItemsArrayAtIndex:(int)index {
  ////NSLog(@"removeObjectFromInvoicesAtIndex");
  Product *p = [invoiceItemsArray objectAtIndex:index];
  // Add the inverse of this operation to the undo stack
  
  NSUndoManager *undo =  [[self window] undoManager];
  [[undo prepareWithInvocationTarget:self] insertObject:p
                                  inInvoiceItemsArrayAtIndex:index];
  if (![undo isUndoing]) {
    [undo setActionName:@"Delete Item"];
  }
  //[self stopObservingProduct:p];
  [invoiceItemsArray removeObjectAtIndex:index];  
}

//******************************************************************************

- (bool)itemsContainsItemP:(NSString *)code {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([[p productCode] isEqualToString:code]) {
      return YES;
    }
  }
  return  NO;  
}

//******************************************************************************

- (Product *)productForCode:(NSString *)code {
  unsigned int i, count = [invoiceItemsArray count];
  for (i = 0; i < count; i++) {
    Product *p = (Product *)[invoiceItemsArray objectAtIndex:i];
    if ([[p productCode] isEqualToString:code]) {
      return p;
    }
  }
  return nil;  
}

//******************************************************************************

- (void)runSelectPersonModal {
  if (clientSelector == nil) {
    PersonSelector *tmp = [[PersonSelector alloc] init];
    [self setClientSelector:tmp];
    [tmp release];
  }
  [clientSelector setupForModal];
  [clientSelector runModalWithParent:[self window]];
  
  Person *selected = [clientSelector person];
  if (selected != nil) {
    [clientSelector setPerson:nil];
    [self setPerson:selected];
    [[self window] setTitle:[NSString stringWithFormat:@"Invoice for: %@", [person personName]]];
      
    // adjust all the buttons to reflect the person's profile
    [self enableAddProjectButtonAppropriately];
    [self enablePayInvoiceButtonAppropriately];
    [self enableApplyDiscountButtonAppropriately];
    [self setupProductsAndCategoriesDoubleActions];
  } else {
    if (runningModal) {
      [self stopModalAndCloseWindow];
    } else {
      [[self window] close];
    }
  }

  //  if (peopleController == nil) {
  //    PeopleController *pc = [[PeopleController alloc] init];
  //    [self setPeopleController:pc];
  //  }
  //  [peopleController setupForModal];
  //  [peopleController runModalWithParent:[self window]];
  //  
  //  // wait for return
  //  Person *selected = [peopleController currentlyViewedPerson];
  //  if (selected != nil) {
  //    [self setPerson:selected];
  //    [peopleController setCurrentlyViewedPerson:nil];
  //    [[self window] setTitle:[NSString stringWithFormat:@"Invoice for: %@", [person personName]]];
  //      
  //    // adjust all the buttons to reflect the person's profile
  //    [self enableAddProjectButtonAppropriately];
  //    [self enablePayInvoiceButtonAppropriately];
  //    [self enableApplyDiscountButtonAppropriately];
  //    [self setupProductsAndCategoriesDoubleActions];
  //  }
}

//******************************************************************************

- (bool)applyDiscountButtonChecked {
  if ([applyDiscountButton state] == 1) {
    return YES;
  } else {
    return NO;
  }
}

//******************************************************************************

- (double)priceOfStandTime {
  NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
  NSNumber *standTimeRate = [defaults objectForKey:TljBkPosStandTimeRateKey];
  return [standTimeRate doubleValue];
}

//******************************************************************************
// handlers
//******************************************************************************

- (void) handleProductsSearchFieldChange:(NSNotification *)note {
  if ([[self window] isKeyWindow] && [note object] == productsSearchField) {
    NSString *searchString = [[[note object] stringValue] lowercaseString];
    NSString *codeString, *nameString, *priceString;
    id object;
    // revert to whole list of objects
    if ( [searchString length] == 0 ) {
      [self setProductsArray:[[Products sharedInstance] arrayForDictionary]];
      previousLengthOfProductsSearchString = 0;
      [productsTableView reloadData];
      return;
    }
    
    // this will hold our filtered list
    NSMutableArray *filteredObjects = [[NSMutableArray alloc] init];
    // if we back up, research the entire list
    if (previousLengthOfProductsSearchString > [searchString length]) {
      [self setProductsArray:[[Products sharedInstance] arrayForDictionary]];
    }
    
    // this needs to be exactly here, otherwise we won't iterate over the correct
    // set of objects
    NSEnumerator *e = [productsArray objectEnumerator];
    while (object = [e nextObject] ) {
      codeString = [[object productCode] lowercaseString];
      NSRange codeRange = [codeString rangeOfString:searchString options:NSLiteralSearch];
      nameString = [[object productName] lowercaseString];
      NSRange nameRange = [nameString rangeOfString:searchString options:NSLiteralSearch];
      priceString = [NSString stringWithFormat:@"%1.2f", [object productPrice]];
      NSRange priceRange = [priceString rangeOfString:searchString options:NSLiteralSearch];
      
      if (((codeRange.length) > 0) || ((nameRange.length) > 0) || ((priceRange.length) > 0)) {
        [filteredObjects addObject:object];
      }
    }
    [self setProductsArray:filteredObjects];
    [productsTableView reloadData];
    previousLengthOfProductsSearchString = [searchString length];
    [filteredObjects release];
  }
}

//******************************************************************************

- (void)handleProductsChange:(NSNotification *)note {
  NSArray *tmp = [[Products sharedInstance] arrayForDictionary];
  [self setProductsArray:tmp];
  [productsTableView reloadData];
}

//******************************************************************************

- (bool) productAddableP:(Product *)p {
  
  if ([self itemIsStand:p] && [self itemsContainsStandP]) {
    NSRunAlertPanel(@"Stand Time Is Already In Invoice",
                    @"Stand time is already in the invoice.\nUse the Price Stepper to increase the number of hours",
                    @"Continue", nil, nil);
    return NO;
  } else if ([self personIsQuickSale]) {
    if ([self itemIsMembership:p]) {
      NSRunAlertPanel(@"Operation Not Permitted",
                      @"Quick Sale cannot buy a membership.\nCancel this invoice and select/create a\nclient to sell the membeship to.",
                      @"Continue", nil, nil);
      return NO;
    } else if ([self itemIsProject:p]) {
      NSRunAlertPanel(@"Operation Not Permitted",
                      @"Quick Sale cannot have a project.  If you want to sell a project, cancel this invoice and use the Create Project button to make a new project.",
                      @"Continue", nil, nil);
      return NO;
    }
  } else if ([self itemIsMembership:p] && [self itemsContainsMembershipP]) {
    NSRunAlertPanel(@"Operation Not Permitted",
                    @"There can only be one membership per invoice.  When a membership is sold, it updates the current client's membership status.  If you want to sell a membership to different person, cancel this invoice and select/create the person you want to apply the membership too.",
                    @"Continue", nil, nil);
    return NO;
  } else if ([self itemIsDonation:p] && [self itemsContainsDonationP]) {
    NSRunAlertPanel(@"Operation Not Permitted",
                    @"There can only be one donation per invoice.",
                    @"Continue", nil, nil);
    return NO;
  } else if ([self itemIsProject:p] && [self itemsContainsProjectP]) {
    NSRunAlertPanel(@"Operation Not Permitted",
                    @"There can only be one project per invoice.",
                    @"Continue", nil, nil);
    return NO;
  }
  
  return YES;
  
}


//******************************************************************************

- (void)handleCategoryClicked:(id)sender {
  ////NSLog(@"category clicked");
  NSCell *selectedCatCell = [categoryBrowser selectedCellInColumn:0];
  NSCell *selectedProductCell = [categoryBrowser selectedCellInColumn:1];
  ProductCategory *pc = [[ProductCategories sharedInstance] productCategoryForCategoryName:[selectedCatCell objectValue]];
  Product *p = [[Products sharedInstance] productForProductName:[selectedProductCell objectValue]];
  if (p != nil) {
    [pc incfTimesViewed];
    [p incfTimesViewed];
    [[ProductCategories sharedInstance] saveToDisk];
    [[Products sharedInstance] saveToDisk];
    
    if ([self productAddableP:p]) {
      if ([self itemIsProject:p]) {
        [addProjectButton performClick:self];
      } else if ([self itemIsMembership:p]) {
        int choice;
        choice = NSRunAlertPanel(@"Adding a Membership",
                                 @"Selling a Membership to a client will change the Membership status of the client.  Don't sell lifetime or cook memberships unless you know what you are about",
                                 @"Continue", @"Cancel", nil);
        if (choice == 1) {
          [self addInvoiceItem:p];
        } else {
          return;
        }
      } else {
        [self addInvoiceItem:p];
      }
    }
  }
}

//******************************************************************************

- (void)handleProductsClicked:(id)sender {
  //NSLog(@"product clicked");
  NSArray *selected = [productsArrayController selectedObjects];
  if ([selected count] > 0) {
    Product *p = [selected objectAtIndex:0];
    ProductCategory *pc = [[ProductCategories sharedInstance] productCategoryForCategoryName:[p productCategory]];
    if (p != nil) {
      
      [pc incfTimesViewed];
      [p incfTimesViewed];
      [[ProductCategories sharedInstance] saveToDisk];
      [[Products sharedInstance] saveToDisk];
      
      if ([self productAddableP:p]) {
        if ([self itemIsProject:p]) {
          [addProjectButton performClick:self];
        } else if ([self itemIsMembership:p]) {
          NSString *type = [p productCode];
					if ([type isEqualToString:@"cook"] ||
						  [type isEqualToString:@"lifetime"]) {
							int choice;
              choice = NSRunAlertPanel(@"Adding a Membership",
                                       @"Selling a Membership to a client will change the Membership status of the client.  Don't sell lifetime or cook memberships unless you know what you are about",
                                       @"Continue", @"Cancel", nil);
							if (choice == 1) {
								[self addInvoiceItem:p];
							} else {
                return;
              }
					} else {
						[self addInvoiceItem:p];
					}
        } else {
          [self addInvoiceItem:p];
        }
      }
    }
  }
}

//******************************************************************************

- (void)handleInvoiceItemsClicked:(id)sender {
  //NSLog(@"invoice clicked");
  NSArray *selected = [invoiceItemsArrayController selectedObjects];
  if ([selected count] > 0) {
    Product *tmp = (Product *)[selected objectAtIndex:0];
    if (tmp != nil) {
      [self setInvoiceItem:tmp];
      if ([self itemIsStand:[self invoiceItem]]) {
        [priceStepper setIncrement:0.25];
        [priceStepper setMinValue:0.25];
        double currentPrice = [invoiceItem productPrice];
        // stand time rate is always at least $1.00/hr
        double newPrice = currentPrice / [self priceOfStandTime];
        int numOf25 = round(newPrice/0.25);
        double newStandTimeVal = numOf25 * 0.25;
        [priceStepper setDoubleValue:newStandTimeVal];
        [priceTextField setDoubleValue:newStandTimeVal];
        //[priceStepper setDoubleValue:newPrice];
        //[priceTextField setDoubleValue:newPrice];
        [priceOrStandTimeTextField setStringValue:@"Hours of Stand Time:"];
        NSNumberFormatter *formatter = [priceTextField formatter];
        [formatter setFormat:@"##0.00"];
        [quantityStepper setIntValue:1];
        [quantityTextField setIntValue:1];
      } else {
        double price = [invoiceItem productPrice];
        int quantity = [invoiceItem productQuantity];
        
        [quantityStepper setIntValue:quantity];
        [quantityTextField setIntValue:quantity];
        
        [priceStepper setDoubleValue:price];
        [priceTextField setDoubleValue:price];
        
        [priceStepper setIncrement:1.0];
        [priceStepper setMinValue:0.0];
        [priceOrStandTimeTextField setStringValue:@"Price:"];
        NSNumberFormatter *formatter = [priceTextField formatter];
        [formatter setFormat:@"$#,##0.00"];
      }
      [invoiceItemsTableView reloadData];
    }
  }
}

//******************************************************************************

- (void)handleTableViewSelectionChange:(NSNotification *)note {
  //NSLog(@"handleTableViewSelectionChange: %@", [note object]);
  if ([[self window] isKeyWindow] && [note object] == invoiceItemsTableView) {
    NSArray *selected = [invoiceItemsArrayController selectedObjects];
    if ([selected count] > 0) {
      Product *tmp = (Product *)[selected objectAtIndex:0];
      if (tmp != nil) {
        [self setInvoiceItem:tmp];
        if ([self itemIsStand:[self invoiceItem]]) {
          [priceStepper setIncrement:0.25];
          [priceStepper setMinValue:0.25];
          double currentPrice = [invoiceItem productPrice];
          // price of stand time is always at least $1.00
          double newPrice = currentPrice / [self priceOfStandTime];
          [priceStepper setDoubleValue:newPrice];
          [priceTextField setDoubleValue:newPrice];
          [priceOrStandTimeTextField setStringValue:@"Hours of Stand Time:"];
          NSNumberFormatter *formatter = [priceTextField formatter];
          [formatter setFormat:@"##0.00"];
        } else {
          double price = [invoiceItem productPrice];
          int quantity = [invoiceItem productQuantity];
          
          [quantityStepper setIntValue:quantity];
          [quantityTextField setIntValue:quantity];
          
          [priceStepper setDoubleValue:price];
          [priceTextField setDoubleValue:price];
          
          [priceStepper setIncrement:1.0];
          [priceStepper setMinValue:0.0];
          [priceOrStandTimeTextField setStringValue:@"Price:"];
          NSNumberFormatter *formatter = [priceTextField formatter];
          [formatter setFormat:@"$#,##0.00"];
        }
        [invoiceItemsTableView reloadData];
      }
    }
  }
}

//******************************************************************************
// accessors and setters
//******************************************************************************

- (NSMutableArray *)productsArray {
  return productsArray;
}
- (void) setProductsArray:(NSArray *)arg {
  if (arg != productsArray) {
    [productsArray release];
    productsArray = [arg mutableCopy];
  }
}
- (NSMutableArray *)invoiceItemsArray {
  return invoiceItemsArray;
}
- (void) setInvoiceItemsArray:(NSArray *)arg {
  if (arg != invoiceItemsArray) {
    [invoiceItemsArray release];
    invoiceItemsArray = [arg mutableCopy];
  }
}
- (Person *)person {
  return person;
}
- (void) setPerson:(Person *)arg {
  [arg retain];
  [person release];
  person = arg;
}
- (Product *)product {
  return product;
}
- (void) setProduct:(Product *)arg {
  [arg retain];
  [product release];
  product = arg;
}
- (Product *)invoiceItem {
  return invoiceItem;
}
- (void) setInvoiceItem:(Product *)arg {
  [arg retain];
  [invoiceItem release];
  invoiceItem = arg;
}
- (Project *)project {
  return project;
}
- (void) setProject:(Project *)arg {
  [arg retain];
  [project release];
  project = arg;
}
- (PayInvoiceController *)payInvoiceController {
  return payInvoiceController;
}
- (void) setPayInvoiceController:(PayInvoiceController *)arg {
  [arg retain];
  [payInvoiceController release];
  payInvoiceController = arg;
}
//- (ProjectController *)projectController {
//  return projectController;
//}
//- (void) setProjectController:(ProjectController *)arg {
//  [arg retain];
//  [projectController release];
//  projectController = arg;
//}
//- (PeopleController *)peopleController {
//  return peopleController;
//}
//- (void) setPeopleController:(PeopleController *)arg {
//  [arg retain];
//  [peopleController release];
//  peopleController = arg;
//}

- (NSArray *)categories {
  return categories;
}
- (void) setCategories:(NSArray *)arg {
  [arg retain];
  [categories release];
  categories = arg;
}
- (PersonSelector *)clientSelector {
  return clientSelector;
}
- (void)setClientSelector:(PersonSelector *)arg {
  [arg retain];
  [clientSelector release];
  clientSelector = arg;
}
- (ProjectSelector *)projectSelector {
  return projectSelector;
}
- (void)setProjectSelector:(ProjectSelector *)arg {
  [arg retain];
  [projectSelector release];
  projectSelector = arg;
}



//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
  NSNotificationCenter *nc;
  nc = [NSNotificationCenter defaultCenter];
  
  [nc addObserver:self
         selector:@selector(handleProductsSearchFieldChange:)
             name:NSControlTextDidChangeNotification
           object:productsSearchField];
  
  [nc addObserver:self
         selector:@selector(handleProductsChange:)
             name:[[Products sharedInstance] notificationChangeString]
           object:nil];
    
    [nc addObserver:self
           selector:@selector(handleTableViewSelectionChange:)
               name:NSTableViewSelectionDidChangeNotification
             object:invoiceItemsTableView];
  

}
@end