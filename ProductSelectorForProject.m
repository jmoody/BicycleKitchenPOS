// 
// ProductSelectorForProject.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "ProductSelectorForProject.h"
#import "Projects.h"
#import "Products.h"
#import "Invoice.h"
#import "MembershipInformation.h"


@implementation ProductSelectorForProject

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"SelectProductsForProject"];
    previousLengthOfProductsSearchString = 0;
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  [productsArray release];
  [itemsArray release];
  [person release];  
  [project release];
  [product release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)windowDidLoad {
   [super windowDidLoad];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForModal {
   [super setupForModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForNonModal {
   [super setupForNonModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)runModalWithParent:(NSWindow *) parent {
   [super runModalWithParent:parent];
}


//******************************************************************************
// setup
//******************************************************************************

- (void)setupButtons {
  // not strictly the buttons - also doing the textfields
  double price = 1.0;
  [priceTextField setDoubleValue:price];
  [priceStepper setDoubleValue:price];
  int quantity = 1;
  [quantityTextField setIntValue:quantity];
  [quantityStepper setIntValue:quantity];
}

//******************************************************************************

- (void)setupTextFields {
  [self clearTextField:productsSearchField];
}

//******************************************************************************

- (void)setupTables {
  [self setProductsArray:[self addableProducts]];
  [productsTableView setTarget:self];
  [productsTableView setDoubleAction:@selector(handleProductsClicked:)];
  
  NSArray *tmp = [[NSArray alloc] init];
  [self setItemsArray:tmp];
  [tmp release];
	[itemsTableView setTarget:self];
  [itemsTableView setDoubleAction:@selector(handleItemsClicked:)];
  [itemsTableView setAction:@selector(handleItemsClicked:)];
    
}

//******************************************************************************

- (void)setupStateVariables {
  [self setProduct:nil];
}


//******************************************************************************
// button actions
//******************************************************************************

- (IBAction)priceStepperClicked:(id)sender {
  //NSLog(@"priceStepper clicked");
  if (product != nil) {
    double newPrice = [priceStepper doubleValue];
    [priceTextField setDoubleValue:newPrice];
    [product setProductPrice:newPrice];
    [self adjustProductPricing];
  }
}

//******************************************************************************

- (IBAction)quantityStepperClicked:(id)sender {
  //NSLog(@"quantityStepper clicked");
  if (product != nil) {
    int newQty = [quantityStepper intValue];
    [quantityTextField setIntValue:newQty];
    [product setProductQuantity:newQty];
    [self adjustProductPricing];
  }
}

//******************************************************************************

- (IBAction)deleteButtonClicked:(id)sender {
  //NSLog(@"deleteButton clicked");
  NSArray *selected = [itemsArrayController selectedObjects];
  if ([selected count] > 0) {
		Product *tmp = (Product*)[selected objectAtIndex:0];
		if (tmp != nil) {
			if ([[tmp productCode] isEqualToString:@"project"]) {
				NSRunAlertPanel(@"Operation Not Permitted",@"You can't delete the bicycle from the project",
												@"Continue",nil,nil);
			} else {		
				int index = [itemsArrayController selectionIndex];
				[self removeObjectFromItemsArrayAtIndex:index];
				[itemsTableView reloadData];
				[self handleItemsClicked:self];
      }	
		}
	}
}

//******************************************************************************

- (IBAction)cancelButtonClicked:(id)sender {
    //NSLog(@"cancelButton clicked");
  // this is how we will know that we've cancelled
  [self setItemsArray:nil];
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}

//******************************************************************************

- (IBAction)doneButtonClicked:(id)sender {
  //NSLog(@"doneButton clicked");
  // handle the inserts in the projectinfo window
//  Invoice *inv = [project invoice];
//  [[inv items] addObjectsFromArray:itemsArray];
//  [[Invoices sharedInstance] saveToDisk];
    
//  NSMutableDictionary *new = [[NSMutableDictionary alloc] init];
//  unsigned int i, count = [itemsArray count];
//  for (i = 0; i < count; i++) {
//    Product *p = (Product *)[itemsArray objectAtIndex:i];
//    NSString *aUid = [p uid];
//    [new setObject:p forKey:aUid];
//  }
//  Invoice *inv = [project invoice];
//  [inv setItems:new];
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }  
}

//******************************************************************************
// misc
//******************************************************************************

- (NSArray *)addableProducts {
  NSMutableArray *array = [[NSMutableArray alloc] init];
  NSMutableDictionary *all = [[Products sharedInstance] dictionary];
  NSEnumerator *e = [all objectEnumerator];
  Product *val;
  while (val = (Product *)[e nextObject]) {
    NSString *code = [val productCode];
    NSString *cat = [val productCategory];
    if (![code isEqualToString:@"project"] &&
        ![code isEqualToString:@"stand"] &&
        ![code isEqualToString:@"donation"] &&
        ![cat isEqualToString:@"Memberships"] &&
        ![cat isEqualToString:@"Workshops"]) {
      [array addObject:val];
    }
  }
  NSArray *returnVal = [NSArray arrayWithArray:array];
  [array release];
  return returnVal;
}

//******************************************************************************

- (void)adjustProductPricing {
  int qty = [product productQuantity];
  double price = [product productPrice] * qty;
  double percentDiscount = 0.0;
  if ([product taxable]) {
    if ([person isMember]) {
      NSString *mt = [person memberType];
      NSData *mid =  [[NSUserDefaults standardUserDefaults] objectForKey:mt];
      MembershipInformation *mi = [NSKeyedUnarchiver unarchiveObjectWithData:mid];
      percentDiscount = [mi discountOnNewParts] * .01;
    }
  }
  double discount = price * percentDiscount;
  [product setProductDiscount:discount];
  double total = round(price - discount);
  [product setProductTotal:total];
}


//******************************************************************************
// handlers
//******************************************************************************

- (void) handleProductsSearchFieldChange:(NSNotification *)note {
  if ([[self window] isKeyWindow] && [note object] == productsSearchField) {
    NSString *searchString = [[[note object] stringValue] lowercaseString];
    NSString *codeString, *nameString, *priceString;
    id object;
    // revert to whole list of objects
    if ( [searchString length] == 0 ) {
      [self setProductsArray:[self addableProducts]];
      previousLengthOfProductsSearchString = 0;
      [productsTableView reloadData];
      return;
    }
    
    // this will hold our filtered list
    NSMutableArray *filteredObjects = [[NSMutableArray alloc] init];
    // if we back up, research the entire list
    if (previousLengthOfProductsSearchString > [searchString length]) {
      [self setProductsArray:[self addableProducts]];
    }
    
    // this needs to be exactly here, otherwise we won't iterate over the correct
    // set of objects
    NSEnumerator *e = [productsArray objectEnumerator];
    while (object = [e nextObject] ) {
      codeString = [[object productCode] lowercaseString];
      NSRange codeRange = [codeString rangeOfString:searchString options:NSLiteralSearch];
      nameString = [[object productName] lowercaseString];
      NSRange nameRange = [nameString rangeOfString:searchString options:NSLiteralSearch];
      priceString = [NSString stringWithFormat:@"%1.2f", [object productPrice]];
      NSRange priceRange = [priceString rangeOfString:searchString options:NSLiteralSearch];
      
      if (((codeRange.length) > 0) || ((nameRange.length) > 0) || ((priceRange.length) > 0)) {
        [filteredObjects addObject:object];
      }
    }
    [self setProductsArray:filteredObjects];
    [productsTableView reloadData];
    previousLengthOfProductsSearchString = [searchString length];
    [filteredObjects release];
  }
}


//******************************************************************************

- (void)handleProductsChange:(NSNotification *)note {
  [self setProductsArray:[self addableProducts]];
  [productsTableView reloadData];
}

//******************************************************************************

- (void)handleProductsClicked:(id)sender {
  //NSLog(@"in handle products clicked");
  NSArray *selected = [productsArrayController selectedObjects];
  if ([selected count] > 0) {
    Product *tmp = (Product *)[selected objectAtIndex:0];
    if (tmp != nil) {
      Product *pcopy = [[Product alloc] init];
      [pcopy setUid:[tmp uid]];
      [pcopy setDisplayName:[tmp displayName]];
      [pcopy setProductName:[tmp productName]];
      [pcopy setProductCategory:[tmp productCategory]];
      [pcopy setProductCode:[tmp productCode]];
      [pcopy setTaxable:[tmp taxable]];
      [pcopy setProductPrice:[tmp productPrice]];
      [pcopy setProductQuantity:1];
      
      [self setProduct:pcopy];
      [pcopy release];
      [self adjustProductPricing];
    
      [itemsArrayController insertObject:pcopy atArrangedObjectIndex:[itemsArray count]];
      [itemsTableView reloadData];
    }
  }
}

//******************************************************************************

- (void)insertObject:(Product *)p inItemsArrayAtIndex:(int)index {
  //NSLog(@"insertObject in items at index");
  //Add the inverse of this operaton to the undo stack
  NSUndoManager *undo = [[self window] undoManager];
  [[undo prepareWithInvocationTarget:self]
    removeObjectFromItemsArrayAtIndex:index];
  if (![undo isUndoing]) {
    [undo setActionName:@"Add Item"];
  }  
  // [self startObservingProduct:p];
  //NSLog(@"itemsArray: %@", itemsArray);
  [itemsArray insertObject:p atIndex:index];
  //NSLog(@"itemsArray: %@", itemsArray);
}

//******************************************************************************

- (void)removeObjectFromItemsArrayAtIndex:(int)index {
  ////NSLog(@"removeObjectFromInvoicesAtIndex");
  Product *p = [itemsArray objectAtIndex:index];
  // Add the inverse of this operation to the undo stack
  
  NSUndoManager *undo =  [[self window] undoManager];
  [[undo prepareWithInvocationTarget:self] insertObject:p
                             inItemsArrayAtIndex:index];
  if (![undo isUndoing]) {
    [undo setActionName:@"Delete Item"];
  }
  //[self stopObservingProduct:p];
  [itemsArray removeObjectAtIndex:index];  
}

//******************************************************************************

- (void)handleItemsClicked:(id)sender {
  NSArray *selected = [itemsArrayController selectedObjects];
  if ([selected count] > 0) {
    Product *tmp = (Product *)[selected objectAtIndex:0];
    [self setProduct:tmp];
    if (tmp != nil) {
      double price = [tmp productPrice];
      [priceTextField setDoubleValue:price];
      [priceStepper setDoubleValue:price];
      int quantity = [tmp productQuantity];
      [quantityTextField setIntValue:quantity];
      [quantityStepper setIntValue:quantity];
    }
  } else {
    double price = 1.0;
    [priceTextField setDoubleValue:price];
    [priceStepper setDoubleValue:price];
    int quantity = 1;
    [quantityTextField setIntValue:quantity];
    [quantityStepper setIntValue:quantity];
  }
}  


//******************************************************************************

- (void) handleItemsTableViewSelectionChange:(NSNotification *)note {
  if ([note object] == itemsTableView) {
    [self handleItemsClicked:self];
  }
}

//******************************************************************************
// accessors and setters
//******************************************************************************

- (NSMutableArray *)productsArray {
  return productsArray;
}
- (void) setProductsArray:(NSArray *)arg {
  if (arg != productsArray) {
    [productsArray release];
    productsArray = [arg mutableCopy];
  }
}
- (NSMutableArray *)itemsArray {
  return itemsArray;
}
- (void) setItemsArray:(NSArray *)arg {
  if (arg != itemsArray) {
    [itemsArray release];
    itemsArray = [arg mutableCopy];
  }
}
- (Project *)project {
  return project;
}
- (void) setProject:(Project *)arg {
  [arg retain];
  [project release];
  project = arg;
}
- (Product *)product {
  return product;
}
- (void) setProduct:(Product *)arg {
  [arg retain];
  [product release];
  product = arg;
}
- (Person *)person {
  return person;
}
- (void) setPerson:(Person *)arg {
  [arg retain];
  [person release];
  person = arg;
}


//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
     NSNotificationCenter *nc;
     nc = [NSNotificationCenter defaultCenter];

    [nc addObserver:self
    selector:@selector(handleProductsSearchFieldChange:)
    name:NSControlTextDidChangeNotification
    object:productsSearchField];

    [nc addObserver:self
    selector:@selector(handleProductsChange:)
    name:[[Products sharedInstance] notificationChangeString]
    object:nil];
    
    [nc addObserver:self
           selector:@selector(handleItemsTableViewSelectionChange:)
               name:NSTableViewSelectionDidChangeNotification
             object:itemsTableView];

}




@end