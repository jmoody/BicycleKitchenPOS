// 
// CompManager.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "CompManager.h"
#import "Comps.h"

@implementation CompManager

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"CompManager"];
    previousLengthOfCompsSearchString = 0;
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  [compsArray release];
  [compViewer release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)windowDidLoad {
  [super windowDidLoad];
  [self setupButtons];
  [self setupTextFields];
  [self setupTables];
  [self setupStateVariables];
}

//******************************************************************************

- (void)setupForModal {
  [super setupForModal];
  [self setupButtons];
  [self setupTextFields];
  [self setupTables];
  [self setupStateVariables];
}

//******************************************************************************

- (void)setupForNonModal {
  [super setupForNonModal];
  [self setupButtons];
  [self setupTextFields];
  [self setupTables];
  [self setupStateVariables];
}

//******************************************************************************

- (void)runModalWithParent:(NSWindow *) parent {
  [super runModalWithParent:parent];
}


//******************************************************************************
// setup
//******************************************************************************

- (void)setupButtons {
  // nothing to be done
}

//******************************************************************************

- (void)setupTextFields {
  [self clearTextField:compsSearchField];
}

//******************************************************************************

- (void)setupTables {
  [self setCompsArray:[[Comps sharedInstance] arrayForDictionary]];
  [compsTableView setTarget:self];
  [compsTableView setDoubleAction:@selector(handleCompsClicked:)];
}

//******************************************************************************

- (void)setupStateVariables {
  // nothing to do
}


//******************************************************************************
// button actions
//******************************************************************************

- (IBAction)closeButtonClicked:(id)sender {
  //NSLog(@"closeButton clicked");
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}

//******************************************************************************
// misc
//******************************************************************************



//******************************************************************************
// handlers
//******************************************************************************


- (void) handleCompsSearchFieldChange:(NSNotification *)note {
  if ([[self window] isKeyWindow] && [note object] == compsSearchField) {
    NSString *searchString = [[[note object] stringValue] lowercaseString];
    NSString *codeString, *nameString, *cookString, *subjectString, *bodyString, *dateString;
    id object;
    // revert to whole list of objects
    if ( [searchString length] == 0 ) {
      [self setCompsArray:[[Comps sharedInstance] arrayForDictionary]];
      previousLengthOfCompsSearchString = 0;
      [compsTableView reloadData];
      return;
    }
    
    // this will hold our filtered list
    NSMutableArray *filteredObjects = [[NSMutableArray alloc] init];
    // if we back up, research the entire list
    if (previousLengthOfCompsSearchString > [searchString length]) {
      [self setCompsArray:[[Comps sharedInstance] arrayForDictionary]];
    }
    
    // this needs to be exactly here, otherwise we won't iterate over the correct
    // set of objects
    NSEnumerator *e = [compsArray objectEnumerator];
    while (object = [e nextObject] ) {
      codeString = [[object productCode] lowercaseString];
      NSRange codeRange = [codeString rangeOfString:searchString options:NSLiteralSearch];
      nameString = [[object productName] lowercaseString];
      NSRange nameRange = [nameString rangeOfString:searchString options:NSLiteralSearch];
      cookString = [[object commentAuthorName] lowercaseString];
      NSRange cookRange = [cookString rangeOfString:searchString options:NSLiteralSearch];
      subjectString = [[object commentSubject] lowercaseString];
      NSRange subjectRange = [subjectString rangeOfString:searchString options:NSLiteralSearch];
      bodyString = [[object commentText] lowercaseString];
      NSRange bodyRange = [bodyString rangeOfString:searchString options:NSLiteralSearch];
      dateString = [[[object date]  descriptionWithCalendarFormat:@"%m/%d/%Y"] lowercaseString];
      NSRange dateRange = [dateString rangeOfString:searchString options:NSLiteralSearch];
      
      if (((codeRange.length) > 0) || ((nameRange.length) > 0) || ((cookRange.length) > 0) || ((subjectRange.length) > 0) || ((bodyRange.length) > 0) || ((dateRange.length) > 0)) {
        [filteredObjects addObject:object];
      }
    }
    [self setCompsArray:filteredObjects];
    [compsTableView reloadData];
    previousLengthOfCompsSearchString = [searchString length];
    [filteredObjects release];
  }
}

- (void)handleCompsChange:(NSNotification *)note {
  NSArray *tmp = [[Comps sharedInstance] arrayForDictionary];
  [self setCompsArray:tmp];
  [compsTableView reloadData];
}

//******************************************************************************

- (void)handleCompsClicked:(id)sender {
  NSArray *selected = [compsArrayController selectedObjects];
  if ([selected count] > 0) {
    Comp *tmp = (Comp *)[selected objectAtIndex:0];
    if (tmp != nil) {
      if (compViewer == nil) {
        CompViewer *cv = [[CompViewer alloc] init];
        [self setCompViewer:cv];
        [cv release];
      }
      [compViewer setComp:tmp];
      [compViewer setupForModal];
      [compViewer runModalWithParent:[self window]];
    }
  }
}

//******************************************************************************
// accessors and setters
//******************************************************************************

- (NSMutableArray *)compsArray {
  return compsArray;
}
- (void) setCompsArray:(NSArray *)arg {
  if (arg != compsArray) {
    [compsArray release];
    compsArray = [arg mutableCopy];
  }
}
- (CompViewer *)compViewer {
  return compViewer;
}
- (void) setCompViewer:(CompViewer *)arg {
  [arg retain];
  [compViewer release];
  compViewer = arg;
}



//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
  NSNotificationCenter *nc;
  nc = [NSNotificationCenter defaultCenter];
  
  [nc addObserver:self
         selector:@selector(handleCompsSearchFieldChange:)
             name:NSControlTextDidChangeNotification
           object:compsSearchField];
  
  [nc addObserver:self
         selector:@selector(handleCompsChange:)
             name:[[Comps sharedInstance] notificationChangeString]
           object:nil];
  
}
@end