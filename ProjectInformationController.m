// 
// ProjectInformationController.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "ProjectInformationController.h"
#import "Projects.h"
#import "Person.h"
#import "People.h"
#import "Contacts.h"
#import "Product.h"
#import "Invoice.h"
#import "Invoices.h"
#import "MembershipInformation.h"

@implementation ProjectInformationController

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"ProjectInfoWindow"];
    previousLengthOfContactsSearchString = 0;
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  [project release];
  [product release];
  [contactCreator release];
  [contact release];
  [contactsArray release];
  [productsArray release];
  [productSelector release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)windowDidLoad {
  [super windowDidLoad];
  [self setupButtons];
  [self setupTextFields];
  [self setupTables];
  [self setupStateVariables];
}

//******************************************************************************

- (void)setupForModal {
  [super setupForModal];
  [self setupButtons];
  [self setupTextFields];
  [self setupTables];
  [self setupStateVariables];
  [theTabView selectFirstTabViewItem:self];
}

//******************************************************************************

- (void)setupForNonModal {
  [super setupForNonModal];
  [self setupButtons];
  [self setupTextFields];
  [self setupTables];
  [self setupStateVariables];
  [theTabView selectFirstTabViewItem:self];
}

//******************************************************************************

- (void)runModalWithParent:(NSWindow *) parent {
  [super runModalWithParent:parent];
}


//******************************************************************************
// setup
//******************************************************************************

- (void)setupButtons {
  // summary
  [lastDatePicker setDateValue:[project dateLastWorked]];
  [summarySaveEditButton setEnabled:NO];
  [summaryCancelEditButton setEnabled:NO];
  [standTimeStepper setDoubleValue:[project standTime]];
  // correspondence
  [contactCancelButton setEnabled:NO];
  [contactSaveButton setEnabled:NO];
  [messageTypeMatrix setState:1 atRow:0 column:0];
  [messageTypeMatrix setEnabled:NO];
  [contactDatePicker setDateValue:[NSCalendarDate calendarDate]];
  [contactDatePicker setEnabled:NO];
  // finacial
  // also setting up some text fields
  [financialSaveEditButton setEnabled:NO];
  [financialCancelEditButton setEnabled:NO];
  double price = 1.0;
  [priceTextField setDoubleValue:price];
  [priceStepper setDoubleValue:price];
  int quantity = 1;
  [quantityTextField setIntValue:quantity];
  [quantityStepper setIntValue:quantity];
}

//******************************************************************************

- (void)setupTextFields {
  // summary
  Person *p = [[People sharedInstance] objectForUid:[project ownerUid]];
  NSString *name = [p personName];
  NSString *phone = [p phoneNumber];
  NSString *email = [p emailAddress];
  NSString *personInfo = [NSString stringWithFormat:@"%@ %@ %@",
    name, phone, email];
  [clientInfoTextField setStringValue:personInfo];
  [nameTextField setStringValue:name];
  Bicycle *b = [project bicycle];
  [[bicycleForm cellAtIndex:0] setStringValue:[b bicycleMake]];
  [[bicycleForm cellAtIndex:1] setStringValue:[b bicycleModel]];
  [[bicycleForm cellAtIndex:2] setStringValue:[b bicycleColor]];
  [typeComboBox setStringValue:[b bicycleType]];
  NSString *strDate = [[project startDate] descriptionWithCalendarFormat:@"%m/%d/%Y"];
  [startDateTextField setStringValue:strDate];
  strDate = [[project finishedDate] descriptionWithCalendarFormat:@"%m/%d/%Y"];
  [endDateTextField setStringValue:strDate];
  [noteTextView setString:[project note]];
  [standTimeTextField setDoubleValue:[project standTime]];
  // correspondence
  [self clearTextField:contactsSearchField];
  [self clearTextField:contactCookTextField];
  [contactCookTextField setEnabled:NO];
  [self clearTextField:contactSubjectTextField];
  [contactSubjectTextField setEnabled:NO];
  [self clearTextView:contactNoteTextView];
  [contactNoteTextView setEditable:NO];
  // finacial
  [quoteTextField setDoubleValue:[project quote]];
  [totalProductsTextField setDoubleValue:[project totalFromProducts]];
  [balanceTextField setDoubleValue:[project balance]];
}

//******************************************************************************

- (void)setupTables {
  [self setContactsArray:[[Contacts sharedInstance] objectsForUids:[project contactUids]]];
  [contactsTableView setTarget:self];
  [contactsTableView setDoubleAction:@selector(handleContactsClicked:)];
  
  [self setProductsArray:[project productsInInvoice]];
  [productsTableView setTarget:self];
  [productsTableView setDoubleAction:@selector(handleProductsClicked:)];
  [productsTableView setAction:@selector(handleProductsClicked:)];
}

//******************************************************************************

- (void)setupStateVariables {
  [self setContact:nil];
  
}


//******************************************************************************
// button actions
//******************************************************************************

- (IBAction)closeButtonClicked:(id)sender {
  //NSLog(@"closeButton clicked");
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}

//******************************************************************************

- (IBAction)changeOwnerButtonClicked:(id)sender {
  // nyi
}

//******************************************************************************

- (IBAction)lastDatePickerClicked:(id)sender {
  //NSLog(@"lastDatePicker clicked");
  NSCalendarDate *today = [NSCalendarDate calendarDate];
  NSCalendarDate *thirtyDays;
  thirtyDays = [today dateByAddingYears:0 months:0 days:30 
                                  hours:0 minutes:0 seconds:0];
  [endDateTextField setStringValue:[thirtyDays descriptionWithCalendarFormat:@"%m/%d/%Y"]];
  [self enableSummarySaveButtonAppropriately];
}

//******************************************************************************

- (IBAction)todayButtonClicked:(id)sender {
  //NSLog(@"todayButton clicked");
  [lastDatePicker setDateValue:[NSCalendarDate calendarDate]];
  NSCalendarDate *today = [NSCalendarDate calendarDate];
  NSCalendarDate *thirtyDays;
  thirtyDays = [today dateByAddingYears:0 months:0 days:30 
                                  hours:0 minutes:0 seconds:0];
  [endDateTextField setStringValue:[thirtyDays descriptionWithCalendarFormat:@"%m/%d/%Y"]];
  [self enableSummarySaveButtonAppropriately];
}

//******************************************************************************

- (IBAction)standTimeStepperClicked:(id)sender {
  //NSLog(@"standTimeStepper clicked");
  [standTimeTextField setDoubleValue:[standTimeStepper doubleValue]];
  [self enableSummarySaveButtonAppropriately];
}

//******************************************************************************

- (IBAction)summarySaveEditButtonClicked:(id)sender {
  //NSLog(@"summarySaveEditButton clicked");
  Bicycle *b = [project bicycle];
  [b setBicycleMake:[self lowercaseAndLatexSafeStringFromString:[[bicycleForm cellAtIndex:0] stringValue]]];
  [b setBicycleModel:[self lowercaseAndLatexSafeStringFromString:[[bicycleForm cellAtIndex:1] stringValue]]];
  [b setBicycleColor:[self lowercaseAndLatexSafeStringFromString:[[bicycleForm cellAtIndex:2] stringValue]]];
  [b setBicycleType:[self lowercaseAndLatexSafeStringFromString:[self stringFromComboBox:typeComboBox]]];
  [project setNote:[self lowercaseAndLatexSafeStringFromTextView:noteTextView]];
  NSCalendarDate *last = [self calendarDateFromDatePicker:lastDatePicker];
  [project setDateLastWorked:last];
  NSCalendarDate *thirtyDays = [last dateByAddingYears:0 months:0 days:30 
                                                 hours:0 minutes:0 seconds:0];
  [project setFinishedDate:thirtyDays];
  [project setStandTime:[standTimeStepper doubleValue]];

  
  // find the project in the invoice and sync the name
  Product *productProject = [project projectProduct];
  [productProject setProductName:[b shortDescription]];
  
  [[Projects sharedInstance] saveToDisk];
  [[Invoices sharedInstance] saveToDisk];
  
  
  [summarySaveEditButton setEnabled:NO];
  [summaryCancelEditButton setEnabled:NO];
}

//******************************************************************************

- (IBAction)summaryCancelEditButtonClicked:(id)sender {
  Bicycle *b = [project bicycle];
  [[bicycleForm cellAtIndex:0] setStringValue:[b bicycleMake]];
  [[bicycleForm cellAtIndex:1] setStringValue:[b bicycleModel]];
  [[bicycleForm cellAtIndex:2] setStringValue:[b bicycleColor]];
  [typeComboBox setStringValue:[b bicycleType]];
  NSString *dateStr = [[project startDate] descriptionWithCalendarFormat:@"%m/%d/%Y"];
  [startDateTextField setStringValue:dateStr];
  dateStr = [[project finishedDate] descriptionWithCalendarFormat:@"%m/%d/%Y"];
  [endDateTextField setStringValue:dateStr];
  [noteTextView setString:[project note]];
  [standTimeTextField setDoubleValue:[project standTime]];
  [summarySaveEditButton setEnabled:NO];
  [summaryCancelEditButton setEnabled:NO];
}

//******************************************************************************

- (IBAction)deleteContactButtonClicked:(id)sender {
  //NSLog(@"deleteContactButton clicked");
  NSArray *selected = [contactsArrayController selectedObjects];
  if ([selected count] > 0) {
    CustomerContact *tmp = [selected objectAtIndex:0];
    if (tmp != nil) {
      NSString *aUid = [tmp uid];
      NSPredicate *predicate = [NSPredicate predicateWithFormat:@"!(SELF like %@)", aUid];
     
      [[project contactUids] filterUsingPredicate:predicate];
      [[Projects sharedInstance] saveToDisk];
      
      Person *person = [[People sharedInstance] objectForUid:[project ownerUid]];
      [[person contactUids] filterUsingPredicate:predicate];
      [[People sharedInstance] saveToDisk];
      [[Contacts sharedInstance] removeObjectForUid:aUid];
     
      // clear the buttons
      [contactCancelButton setEnabled:NO];
      [contactSaveButton setEnabled:NO];
      [messageTypeMatrix setState:1 atRow:0 column:0];
      [messageTypeMatrix setEnabled:NO];
      [contactDatePicker setDateValue:[NSCalendarDate calendarDate]];
      [contactDatePicker setEnabled:NO];
      // clear the text fields
      [self clearTextField:contactsSearchField];
      [self clearTextField:contactCookTextField];
      [contactCookTextField setEnabled:NO];
      [self clearTextField:contactSubjectTextField];
      [contactSubjectTextField setEnabled:NO];
      [self clearTextView:contactNoteTextView];
      [contactNoteTextView setEditable:NO];
    }
  }  
}

//******************************************************************************

- (IBAction)newContactButtonClicked:(id)sender {
  if (contactCreator == nil) {
    CreateCorrespondence *tmp = [[CreateCorrespondence alloc] init];
    [self setContactCreator:tmp];
    [tmp release];
  }
  Person *p = [[People sharedInstance] objectForUid:[project ownerUid]];
  
  [contactCreator setPerson:p];
  [contactCreator setupForModal];
  [contactCreator runModalWithParent:[self window]];
  // wait for the return
  if ([contactCreator contact] != nil) {
    [[project contactUids] addObject:[[contactCreator contact] uid]];
    [[Projects sharedInstance] saveToDisk];
    [self setContactsArray:[[Contacts sharedInstance] objectsForUids:[project contactUids]]];
    [self setContact:[contactCreator contact]];
    NSString *aUid = [contact uid];
    NSArray *objects = [contactsArrayController arrangedObjects];
    int index = -1;
    unsigned int i, count = [objects count];
    for (i = 0; i < count; i++) {
      CustomerContact *c = [objects objectAtIndex:i];
      if ([aUid isEqualToString:[c uid]]) {
        index = i;
      }
    }
    if (index != -1) {
      [contactsArrayController setSelectionIndex:index];
      [self handleContactsClicked:self];
    }
  } else {
    [contactCancelButton setEnabled:NO];
    [contactSaveButton setEnabled:NO];
    [messageTypeMatrix setState:1 atRow:0 column:0];
    [messageTypeMatrix setEnabled:NO];
    [contactDatePicker setDateValue:[NSCalendarDate calendarDate]];
    [contactDatePicker setEnabled:NO];
    
    [self clearTextField:contactsSearchField];
    [contactCookTextField setEnabled:NO];
    [self clearTextField:contactSubjectTextField];
    [contactSubjectTextField setEnabled:NO];
    [self clearTextView:contactNoteTextView];
    [contactNoteTextView setEditable:NO];
    [self setContact:nil];
  }
}

//******************************************************************************

- (IBAction)messageTypeMatrixClicked:(id)sender {
  //NSLog(@"messageTypeMatrix clicked");
  [self enableContactSaveButtonAppropriately];
}

//******************************************************************************

- (IBAction)contactDatePickerClicked:(id)sender {
  //NSLog(@"contactDatePicker clicked");
  [self enableContactSaveButtonAppropriately];
}

//******************************************************************************

- (IBAction)contactCancelButtonClicked:(id)sender {
  //NSLog(@"contactCancelButton clicked");
  [contactCookTextField setStringValue:[contact commentAuthorName]];
  [contactSubjectTextField setStringValue:[contact commentSubject]];
  [contactNoteTextView setString:[contact commentText]];
  [contactDatePicker setDateValue:[contact date]];
  if ([contact leftMessage]) {
    [messageTypeMatrix setState:1 atRow:0 column:0];
  } else if ([contact spokeDirectly]) {
    [messageTypeMatrix setState:1 atRow:0 column:1];
  } else {
    [messageTypeMatrix setState:1 atRow:0 column:2];
  }
  
  [contactCancelButton setEnabled:NO];
  [contactSaveButton setEnabled:NO];
}

//******************************************************************************

- (IBAction)contactSaveButtonClicked:(id)sender {
  //NSLog(@"contactSaveButton clicked");
  [contact setCommentAuthorName:[self lowercaseAndLatexSafeStringFromTextField:contactCookTextField]];
  [contact setCommentSubject:[self lowercaseAndLatexSafeStringFromTextField:contactSubjectTextField]];
  [contact setCommentText:[self lowercaseAndLatexSafeStringFromTextView:contactNoteTextView]];
  [contact setDate:[self calendarDateFromDatePicker:contactDatePicker]];
  [contact setLeftMessage:[self boolValueForRadioMatrix:messageTypeMatrix cell:[messageTypeMatrix cellAtRow:0 column:0]]];
  [contact setSpokeDirectly:[self boolValueForRadioMatrix:messageTypeMatrix cell:[messageTypeMatrix cellAtRow:0 column:1]]];
  [contact setSentEmail:[self boolValueForRadioMatrix:messageTypeMatrix cell:[messageTypeMatrix cellAtRow:0 column:2]]];
  [[Contacts sharedInstance] saveToDisk];
  [contactSaveButton setEnabled:NO];
  [contactCancelButton setEnabled:NO];
}

//******************************************************************************

- (IBAction)priceStepperClicked:(id)sender {
  //NSLog(@"priceStepper clicked");
  if (product != nil) {
    if ([[product productCode] isEqualToString:@"project"]) {
      NSRunAlertPanel(@"Operation Not Permitted",
                      @"Use the quote text field to edit the quote",
                      @"Continue", nil, nil);
    } else {
      double newPrice = [priceStepper doubleValue];
      [priceTextField setDoubleValue:newPrice];
      [product setProductPrice:newPrice];
      [self adjustProductPricing];
    }
  }
}

//******************************************************************************

- (IBAction)quantityStepperClicked:(id)sender {
  //NSLog(@"quantityStepper clicked");
  if (product != nil) {
    if ([[product productCode] isEqualToString:@"project"]) {
      NSRunAlertPanel(@"Operation Not Permitted",
                      @"There can only be one project per invoice.",
                      @"Continue", nil, nil);
    } else {
      int newQty = [quantityStepper intValue];
      [quantityTextField setIntValue:newQty];
      [product setProductQuantity:newQty];
      [self adjustProductPricing];
    }
  }
}

//******************************************************************************

- (IBAction)deleteProductButtonClicked:(id)sender {
  //NSLog(@"deleteProductButton clicked");
  NSArray *selected = [productsArrayController selectedObjects];
  if ([selected count] > 0) {
    Product *tmp = (Product *)[selected objectAtIndex:0];
    if (tmp != nil) {
      if ([[tmp productCode] isEqualToString:@"project"]) {
        NSRunAlertPanel(@"Operation Not Permitted",@"You can't delete the bicycle from the project",
                        @"Continue",nil,nil);
      } else {
        int index = [productsArrayController selectionIndex];
        [productsArrayController removeObjectAtArrangedObjectIndex:index];
        
      }
    }
  }
}

//******************************************************************************

- (void)insertObject:(Product *)p inProductsArrayAtIndex:(int)index {
  NSLog(@"insertObject inInvoicesAtIndex");
  //Add the inverse of this operaton to the undo stack
  NSUndoManager *undo = [[self window] undoManager];
  [[undo prepareWithInvocationTarget:self]
    removeObjectFromProductsArrayAtIndex:index];
  if (![undo isUndoing]) {
    [undo setActionName:@"Add Item"];
  }  
  // [self startObservingProduct:p];
	NSLog(@"productsArray: %@",productsArray);
  [productsArray insertObject:p atIndex:index];
		NSLog(@"productsArray: %@",productsArray);
  [productsTableView reloadData];
  
  [totalProductsTextField setDoubleValue:[project totalFromProducts]];
  [balanceTextField setDoubleValue:[project balance]];
  
  [[project invoice] setItems:productsArray];
  [[Projects sharedInstance] saveToDisk];
  [[Invoices sharedInstance] saveToDisk];
  
  [self handleProductsClicked:self];

}

//******************************************************************************

- (void)removeObjectFromProductsArrayAtIndex:(int)index {
  ////NSLog(@"removeObjectFromInvoicesAtIndex");
  Product *p = [productsArray objectAtIndex:index];
  // Add the inverse of this operation to the undo stack
  
  NSUndoManager *undo =  [[self window] undoManager];
  [[undo prepareWithInvocationTarget:self] insertObject:p
                                    inProductsArrayAtIndex:index];
  if (![undo isUndoing]) {
    [undo setActionName:@"Delete Item"];
  }
  //[self stopObservingProduct:p];
  [productsArray removeObjectAtIndex:index]; 
  [productsTableView reloadData];
  
  [totalProductsTextField setDoubleValue:[project totalFromProducts]];
  [balanceTextField setDoubleValue:[project balance]];
  
  [[project invoice] setItems:productsArray];
  [[Projects sharedInstance] saveToDisk];
  [[Invoices sharedInstance] saveToDisk];
  
  [self handleProductsClicked:self];
  
}


//******************************************************************************

- (IBAction)addProductButtonClicked:(id)sender {
  //NSLog(@"addProductButton clicked");
  if (productSelector == nil) {
    ProductSelectorForProject *tmp = [[ProductSelectorForProject alloc] init];
    [self setProductSelector:tmp];
    [tmp release];
  }
  Person *p = [[People sharedInstance] objectForUid:[project ownerUid]];
  [productSelector setPerson:p];
	
  //[productSelector setItemsArray:productsArray];
  [productSelector setupForModal];
  [productSelector runModalWithParent:[self window]];
  // if the items array is nil, then we will know that user cancelled
	NSLog(@"[productSelector itemsArray]: %@", [productSelector itemsArray]);
  if ([productSelector itemsArray] != nil) {
    NSArray *new = [productSelector itemsArray];
    unsigned int i, count = [new count];
    for (i = 0; i < count; i++) {
      Product *prod = (Product *)[new objectAtIndex:i];
      [self insertObject:prod inProductsArrayAtIndex:[productsArray count]];
    }
  }
}

//******************************************************************************

- (IBAction)financialSaveEditButtonClicked:(id)sender {
  //NSLog(@"finacialSaveEditButton clicked");
  double newQuote = [quoteTextField doubleValue];
  [project setQuote:newQuote];
  Product *projectProduct = [project projectProduct];
  [projectProduct setProductPrice:newQuote];
  [projectProduct setProductTotal:newQuote];
  [balanceTextField setDoubleValue:[project balance]];
  [financialSaveEditButton setEnabled:NO];
  [financialCancelEditButton setEnabled:NO];
}

//******************************************************************************

- (IBAction)financialCancelEditButtonClicked:(id)sender {
  [quoteTextField setDoubleValue:[project quote]];
  [balanceTextField setDoubleValue:[project balance]];
  [financialSaveEditButton setEnabled:NO];
  [financialCancelEditButton setEnabled:NO];
}


//******************************************************************************
// misc
//******************************************************************************
- (void)enableSummarySaveButtonAppropriately {
  //NSLog(@"enableSummarySaveButtonAppropriately");
  Bicycle *b = [project bicycle];
  NSString *orgMake = [b bicycleMake];
  NSString *orgModel = [b bicycleModel];
  NSString *orgColor = [b bicycleColor];
  NSString *orgType = [b bicycleType];
  NSString *orgNote = [project note];
  double orgStand = [project standTime];
  
  NSString *newMake = [[bicycleForm cellAtIndex:0] stringValue];
  NSString *newModel = [[bicycleForm cellAtIndex:1] stringValue];
  NSString *newColor = [[bicycleForm cellAtIndex:2] stringValue];
  NSString *newType = [self stringFromComboBox:typeComboBox];
  NSString *newNote = [noteTextView string];
  double newStand = [standTimeTextField doubleValue];
  
  bool dateIsDifferent;
  NSCalendarDate *orgDate = [project dateLastWorked];
  NSCalendarDate *newDate = [self calendarDateFromDatePicker:lastDatePicker];
  if ([self date:orgDate equalsDate:newDate]) {
    dateIsDifferent = NO;
  } else {
    dateIsDifferent = YES;
  }
    
  if (dateIsDifferent || (orgStand != newStand) ||
      ![self string:orgMake equalsString:newMake] ||
      ![self string:orgModel equalsString:newModel] ||
      ![self string:orgColor equalsString:newColor] ||
      ![self string:orgType equalsString:newType] ||
      ![self string:orgNote equalsString:newNote]) {
    [summarySaveEditButton setEnabled:YES];
    [summaryCancelEditButton setEnabled:YES];
  } else {
    [summarySaveEditButton setEnabled:NO];
    [summaryCancelEditButton setEnabled:NO];
  }
}

//******************************************************************************

- (void)enableContactSaveButtonAppropriately {
  bool messageTypeIsDifferent;
  
  bool newMessage = [self boolValueForRadioMatrix:messageTypeMatrix cell:[messageTypeMatrix cellAtRow:0 column:0]];
  bool newSpoke = [self boolValueForRadioMatrix:messageTypeMatrix cell:[messageTypeMatrix cellAtRow:0 column:1]];
  bool newEmail = [self boolValueForRadioMatrix:messageTypeMatrix cell:[messageTypeMatrix cellAtRow:0 column:2]];
  bool orgMessage = [contact leftMessage];
  bool orgSpoke = [contact spokeDirectly];
  bool orgEmail = [contact sentEmail];
  if ((newMessage != orgMessage) || (newSpoke != orgSpoke) || (newEmail != orgEmail)) {
    messageTypeIsDifferent = YES;
  } else {
    messageTypeIsDifferent = NO;
  }
  
  bool dateIsDifferent;
  
  NSCalendarDate *org = [contact date];
  NSCalendarDate *new = [self calendarDateFromDatePicker:contactDatePicker];
  if ([self date:org equalsDate:new]) {
    dateIsDifferent = NO;
  } else {
    dateIsDifferent = YES;
  }
  
  NSString *newCook = [[contactCookTextField stringValue] lowercaseString];
  NSString *orgCook = [contact commentAuthorName];
  NSString *newSub = [[contactSubjectTextField stringValue] lowercaseString];
  NSString *orgSub = [contact commentSubject];
  NSString *newNote = [[contactNoteTextView string] lowercaseString];
  NSString *orgNote = [contact commentText];
  
  
  if (messageTypeIsDifferent || dateIsDifferent ||
      ![self string:newCook equalsString:orgCook] ||
      ![self string:newSub equalsString:orgSub] ||
      ![self string:newNote equalsString:orgNote]) {
    [contactCancelButton setEnabled:YES];
    [contactSaveButton setEnabled:YES];
  } else {
    [contactCancelButton setEnabled:NO];
    [contactSaveButton setEnabled:NO];
  }
}

//******************************************************************************

- (void)enableFinacialSaveEditButton {
  double newQ = [quoteTextField doubleValue];
  double orgQ = [project quote];
  if (newQ != orgQ) {
    [financialSaveEditButton setEnabled:YES];
    [financialCancelEditButton setEnabled:YES];
  } else {
    [financialSaveEditButton setEnabled:NO];
    [financialCancelEditButton setEnabled:NO];
  }
}


//******************************************************************************

- (void)adjustProductPricing {
  int qty = [product productQuantity];
  double price = [product productPrice] * qty;
  double percentDiscount = 0.0;
  Person *person = [[People sharedInstance] objectForUid:[project ownerUid]];
  if ([product taxable]) {
    if ([person isMember]) {
      NSString *mt = [person memberType];
      NSData *mid =  [[NSUserDefaults standardUserDefaults] objectForKey:mt];
      MembershipInformation *mi = [NSKeyedUnarchiver unarchiveObjectWithData:mid];
      percentDiscount = [mi discountOnNewParts] * .01;
    }
  }
  double discount = price * percentDiscount;
  [product setProductDiscount:discount];
  double total = round(price - discount);
  [product setProductTotal:total];
  
  [totalProductsTextField setDoubleValue:[project totalFromProducts]];
  [balanceTextField setDoubleValue:[project balance]];
  //NSLog(@"totalFromProducts: %1.2f", [project totalFromProducts]);
}

//******************************************************************************
// handlers
//******************************************************************************

- (void) textDidChange:(NSNotification *)note {
  //NSLog(@"textDidChange: %@", [note object]);
  if ([[self window] isKeyWindow]) {
    id object = [note object];
    if (object == bicycleForm  || object == typeComboBox || object == noteTextView) {
      [self enableSummarySaveButtonAppropriately];
    } else if ((object == contactCookTextField) || (object == contactSubjectTextField) ||
               (object == contactNoteTextView)) {
      [self enableContactSaveButtonAppropriately];
    } else {
      [self enableFinacialSaveEditButton];
    }
  }
}

//******************************************************************************

- (void) handleContactsSearchFieldChange:(NSNotification *)note {
  if ([[self window] isKeyWindow] && [note object] == contactsSearchField) {
    NSString *searchString = [[[note object] stringValue] lowercaseString];
    NSString *authorString, *dateString, *typeString, *subjectString, *textString;
    id object;
    // revert to whole list of objects
    if ( [searchString length] == 0 ) {
      [self setContactsArray:[[Contacts sharedInstance] objectsForUids:[project contactUids]]];
      previousLengthOfContactsSearchString = 0;
      [contactsTableView reloadData];
      return;
    }
    
    // this will hold our filtered list
    NSMutableArray *filteredObjects = [[NSMutableArray alloc] init];
    // if we back up, research the entire list
    if (previousLengthOfContactsSearchString > [searchString length]) {
      [self setContactsArray:[[Contacts sharedInstance] objectsForUids:[project contactUids]]];
    }
    
    // this needs to be exactly here, otherwise we won't iterate over the correct
    // set of objects
    NSEnumerator *e = [contactsArray objectEnumerator];
    while (object = [e nextObject] ) {
      authorString = [[object commentAuthorName] lowercaseString];
      NSRange authorRange = [authorString rangeOfString:searchString options:NSLiteralSearch];
      dateString = [[[object date]  descriptionWithCalendarFormat:@"%m/%d/%Y"] lowercaseString];
      NSRange dateRange = [dateString rangeOfString:searchString options:NSLiteralSearch];
      typeString = [[object stringForContactType] lowercaseString];
      NSRange typeRange = [typeString rangeOfString:searchString options:NSLiteralSearch];
      subjectString = [[object commentSubject] lowercaseString];
      NSRange subjectRange = [subjectString rangeOfString:searchString options:NSLiteralSearch];
      textString = [[object commentText] lowercaseString];
      NSRange textRange = [textString rangeOfString:searchString options:NSLiteralSearch];
      
      if (((authorRange.length) > 0) || ((dateRange.length) > 0) || ((typeRange.length) > 0) || ((subjectRange.length) > 0) || ((textRange.length) > 0)) {
        [filteredObjects addObject:object];
      }
    }
    [self setContactsArray:filteredObjects];
    [contactsTableView reloadData];
    previousLengthOfContactsSearchString = [searchString length];
    [filteredObjects release];
  }
}

//******************************************************************************

- (void)handleContactsChange:(NSNotification *)note {
  [self clearTextField:contactsSearchField];
  NSArray *tmp = [[Contacts sharedInstance] objectsForUids:[project contactUids]];
  [self setContactsArray:tmp];
  [contactsTableView reloadData];
}

//******************************************************************************

- (void)handleContactsClicked:(id)sender {
  NSArray *selected = [contactsArrayController selectedObjects];
  if ([selected count] > 0) {
    CustomerContact *tmp = (CustomerContact *)[selected objectAtIndex:0];
    if (tmp != nil) {
      [self setContact:tmp];
      [contactCookTextField setStringValue:[contact commentAuthorName]];
      [contactSubjectTextField setStringValue:[contact commentSubject]];
      [contactNoteTextView setString:[contact commentText]];
      [contactDatePicker setDateValue:[contact date]];
      if ([contact leftMessage]) {
        [messageTypeMatrix selectCellAtRow:0 column:0]; 
      } else if ([contact spokeDirectly]) {
        [messageTypeMatrix selectCellAtRow:0 column:1]; 
      } else {
        [messageTypeMatrix selectCellAtRow:0 column:2]; 
      }
      [contactCancelButton setEnabled:NO];
      [contactSaveButton setEnabled:NO];
      [messageTypeMatrix setEnabled:YES];
      [contactDatePicker setEnabled:YES];
    }
  }
}

//******************************************************************************

- (void)handleContactsTableViewSelectionChange:(NSNotification *)note {
  if ([note object] == contactsTableView) {
    [self handleContactsClicked:self];
  }
}

//******************************************************************************

- (void)handleProductsClicked:(id)sender {
  NSArray *selected = [productsArrayController selectedObjects];
  if ([selected count] > 0) {
    Product *tmp = (Product *)[selected objectAtIndex:0];
    if (tmp != nil) {
      [self setProduct:tmp];
      double price = [tmp productPrice];
      int qty = [tmp productQuantity];
      [priceStepper setDoubleValue:price];
      [priceTextField setDoubleValue:price];
      [quantityStepper setIntValue:qty];
      [quantityTextField setIntValue:qty];
    }
  }
}

//******************************************************************************

- (void) handleProductsTableViewSelectionChange:(NSNotification *)note {
  if ([note object] == productsTableView) {
    [self handleProductsClicked:self];
  }
}

//******************************************************************************
// accessors and setters
//******************************************************************************

- (Project *)project {
  return project;
}
- (void) setProject:(Project *)arg {
  [arg retain];
  [project release];
  project = arg;
}
- (Product *)product {
  return product;
}
- (void) setProduct:(Product *)arg {
  [arg retain];
  [product release];
  product = arg;
}
- (CreateCorrespondence *)contactCreator {
  return contactCreator;
}
- (void) setContactCreator:(CreateCorrespondence *)arg {
  [arg retain];
  [contactCreator release];
  contactCreator = arg;
}
- (CustomerContact *)contact {
  return contact;
}
- (void) setContact:(CustomerContact *)arg {
  [arg retain];
  [contact release];
  contact = arg;
}
- (NSMutableArray *)contactsArray {
  return contactsArray;
}
- (void) setContactsArray:(NSArray *)arg {
  if (arg != contactsArray) {
    [contactsArray release];
    contactsArray = [arg mutableCopy];
  }
}
- (NSMutableArray *)productsArray {
  return productsArray;
}
- (void) setProductsArray:(NSArray *)arg {
  if (arg != productsArray) {
    [productsArray release];
    productsArray = [arg mutableCopy];
  }
}
- (ProductSelectorForProject *)productSelector {
  return productSelector;
}
- (void) setProductSelector:(ProductSelectorForProject *)arg {
  [arg retain];
  [productSelector release];
  productSelector = arg;
}



//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
  NSNotificationCenter *nc;
  nc = [NSNotificationCenter defaultCenter];
    
//  [nc addObserver:self
//         selector:@selector(textDidChange:)
//             name:NSControlTextDidChangeNotification
//           object:[bicycleForm cellAtIndex:0]];
//  
//  [nc addObserver:self
//         selector:@selector(textDidChange:)
//             name:NSControlTextDidChangeNotification
//           object:[bicycleForm cellAtIndex:1]];
//  
//  [nc addObserver:self
//         selector:@selector(textDidChange:)
//             name:NSControlTextDidChangeNotification
//           object:[bicycleForm cellAtIndex:2]];
  
  
  [nc addObserver:self
         selector:@selector(textDidChange:)
             name:NSControlTextDidChangeNotification
           object:bicycleForm];
  
  [nc addObserver:self
         selector:@selector(textDidChange:)
             name:NSComboBoxSelectionDidChangeNotification
           object:typeComboBox];
  
  [nc addObserver:self
         selector:@selector(textDidChange:)
             name:NSControlTextDidChangeNotification
           object:noteTextView];
  
  
  [nc addObserver:self
         selector:@selector(handleContactsTableViewSelectionChange:)
             name:NSTableViewSelectionDidChangeNotification
           object:contactsTableView];
  
  [nc addObserver:self
         selector:@selector(handleContactsSearchFieldChange:)
             name:NSControlTextDidChangeNotification
           object:contactsSearchField];
  
  [nc addObserver:self
         selector:@selector(textDidChange:)
             name:NSControlTextDidChangeNotification
           object:contactCookTextField];
  
  [nc addObserver:self
         selector:@selector(textDidChange:)
             name:NSControlTextDidChangeNotification
           object:contactSubjectTextField];
  
  [nc addObserver:self
         selector:@selector(textDidChange:)
             name:NSControlTextDidChangeNotification
           object:contactNoteTextView];
  
  [nc addObserver:self
         selector:@selector(textDidChange:)
             name:NSControlTextDidChangeNotification
           object:quoteTextField];
  
  [nc addObserver:self
         selector:@selector(handleContactsChange:)
             name:[[Contacts sharedInstance] notificationChangeString]
           object:nil];
  
  [nc addObserver:self
         selector:@selector(handleProductsTableViewSelectionChange:)
             name:NSTableViewSelectionDidChangeNotification
           object:productsTableView];
  
}



@end