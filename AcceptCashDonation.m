// 
// AcceptCashDonation.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "AcceptCashDonation.h"
#import "People.h"
#import "Donations.h"
#import "CashDonationArchiver.h"

@implementation AcceptCashDonation

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"AcceptCashDonation"];
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  [person release];
  [donation release];
  [peopleController release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)windowDidLoad {
   [super windowDidLoad];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForModal {
   [super setupForModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForNonModal {
   [super setupForNonModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)runModalWithParent:(NSWindow *) parent {
   [super runModalWithParent:parent];
}


//******************************************************************************
// setup
//******************************************************************************

- (void)setupButtons {
  if (runningFromPayInvoice || runningFromCashDonationManager) {
    [amountStepper setEnabled:NO];
    [amountStepper setHidden:YES];
    [self hideAndDisableButton:fiveButton];
    [self hideAndDisableButton:tenButton];
    [self hideAndDisableButton:twentyButton];
    [self hideAndDisableButton:fiftyButton];
    [self hideAndDisableButton:hundredButton];
    [self hideAndDisableButton:clearCashButton];
    [printButton setEnabled:NO];
  } else {
    [amountStepper setEnabled:YES];
    [amountStepper setHidden:NO];
    [amountStepper setDoubleValue:0.0];
    [self showAndEnableButton:fiveButton];
    [self showAndEnableButton:tenButton];
    [self showAndEnableButton:twentyButton];
    [self showAndEnableButton:fiftyButton];
    [self showAndEnableButton:hundredButton];
    [self showAndEnableButton:clearCashButton];
  }  
  
  if (runningFromPayInvoice) {
    [self hideAndDisableButton:cancelButton];
  } else {
    [self showAndEnableButton:cancelButton];
  }
}

//******************************************************************************

- (void)setupTextFields {
  // regardless of mode, let's clear the text fields.
  [self clearTextField:nameTextField];
  [self clearTextField:companyTextField];
  [self clearTextField:addressTextField];
  [self clearTextField:cityTextField];
  [self clearTextField:stateTextField];
  [self clearTextField:zipTextField];
  [self clearTextField:phoneTextField];
  [self clearTextField:emailTextField];
  [self clearTextField:amountTextField];
  
  if (runningFromPayInvoice || runningFromAppController) {
    [cookTextField setEditable:YES];
    [companyTextField setEditable:YES];
    [addressTextField setEditable:YES];
    [cityTextField setEditable:YES];
    [stateTextField setEditable:YES];
    [zipTextField setEditable:YES];
    [phoneTextField setEditable:YES];
    [emailTextField setEditable:YES];    
  } else {
    [cookTextField setEditable:NO];
    [companyTextField setEditable:NO];
    [addressTextField setEditable:NO];
    [cityTextField setEditable:NO];
    [stateTextField setEditable:NO];
    [zipTextField setEditable:NO];
    [phoneTextField setEditable:NO];
    [emailTextField setEditable:NO];
  }
  
  if (runningFromPayInvoice) {
    //NSLog(@"person: %@", person);
    [nameTextField setStringValue:[person personName]];
    [companyTextField setStringValue:[person companyName]];
    [addressTextField setStringValue:[person address]];
    [cityTextField setStringValue:[person city]];
    [stateTextField setStringValue:[person addressState]];
    [zipTextField setStringValue:[person zip]];
    [phoneTextField setStringValue:[person phoneNumber]];
    NSCalendarDate *today = [NSCalendarDate calendarDate];
    [dateTextField setStringValue:[today descriptionWithCalendarFormat:@"%m/%d/%Y"]];
    [emailTextField setStringValue:[person emailAddress]];
    [self clearTextField:cookTextField];
    [amountTextField setDoubleValue:donationAmount];
  } else if (runningFromAppController) {
    
  } else {
    // there will be a donation
  }
}

//******************************************************************************

- (void)setupTables {
  // no tables
}

//******************************************************************************

- (void)setupStateVariables {
  [self setDonation:nil];
}


//******************************************************************************
// button actions
//******************************************************************************

- (IBAction)cancelButtonClicked:(id)sender {
    //NSLog(@"cancelButton clicked");
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}

//******************************************************************************

- (IBAction)amountStepperClicked:(id)sender {
  //NSLog(@"amountStepper clicked");
  [amountTextField setDoubleValue:[amountStepper doubleValue]];
}

//******************************************************************************

- (void)incfAmount:(double)delta {
  double newAmount = [amountStepper doubleValue] + delta;
  [amountTextField setDoubleValue:newAmount];
  [amountStepper setDoubleValue:newAmount];  
}

//******************************************************************************


- (IBAction)fiveButtonClicked:(id)sender {
  //NSLog(@"fiveButton clicked");
  [self incfAmount:5.0];
}

//******************************************************************************

- (IBAction)tenButtonClicked:(id)sender {
  [self incfAmount:10.0];
}

//******************************************************************************

- (IBAction)twentyButtonClicked:(id)sender {
    //NSLog(@"twentyButton clicked");
  [self incfAmount:20.0];
}

//******************************************************************************

- (IBAction)fiftyButtonClicked:(id)sender {
    //NSLog(@"fiftyButton clicked");
  [self incfAmount:50.0];
}

//******************************************************************************

- (IBAction)hundredButtonClicked:(id)sender {
    //NSLog(@"hundredButton clicked");
  [self incfAmount:100.0];
}

//******************************************************************************

- (IBAction)printButtonClicked:(id)sender {
  //NSLog(@"printButton clicked");
  NSString *newPhone = [phoneTextField stringValue];
  
  bool badPhone;  
  if (![newPhone isEqualToString:[person phoneNumber]]) {
    badPhone = [[People sharedInstance] phoneNumberIsBadlyFormatted:newPhone];
  } else {
    badPhone = NO;
  }
  
  if (badPhone) {
    NSString *message = [NSString stringWithFormat:@"Phone number %@ is badly formatted,\nFollow the 213.700.6271 example.",
      newPhone];
    NSRunAlertPanel(@"Bad Phone Number", message, @"Try Again", nil, nil);
    [self printButtonClicked:self];
  }
   
  [person setPersonName:[self lowercaseAndLatexSafeStringFromTextField:nameTextField]];
  [person setPhoneNumber:[phoneTextField stringValue]];
  [person setEmailAddress:[self lowercaseAndLatexSafeStringFromTextField:emailTextField]];
  [person setCompanyName:[self lowercaseAndLatexSafeStringFromTextField:companyTextField]];
  [person setAddress:[self lowercaseAndLatexSafeStringFromTextField:addressTextField]];
  [person setCity:[self lowercaseAndLatexSafeStringFromTextField:cityTextField]];
  [person setAddressState:[self lowercaseAndLatexSafeStringFromTextField:stateTextField]];
  [person setZip:[self lowercaseAndLatexSafeStringFromTextField:zipTextField]];

  Donation *newDon = [[Donation alloc] init];
  [newDon setSentThankYou:NO];
  [newDon setDonationAmount:[amountTextField doubleValue]];
  [newDon setDonorUid:[person uid]];
  [newDon setCookNameOrInitials:[self latexSafeStringFromTextField:cookTextField]];
  [[person cashDonationUids] addObject:[newDon uid]];

  [[People sharedInstance] saveToDisk];
  [[Donations sharedInstance] setObject:newDon forUid:[newDon uid]];
  [[CashDonationArchiver sharedInstance] archiveDonation:newDon andPrint:YES];
  [newDon release];
  
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}

//******************************************************************************

- (IBAction)clearCashButtonClicked:(id)sender {
  [amountStepper setDoubleValue:0.0];
  [amountTextField setDoubleValue:0.0];
}

//******************************************************************************
// misc
//******************************************************************************

- (void)enablePrintButtonAppropriately {
  //NSLog(@"enablePrintButtonAppropriately");
  bool amountGreaterThanZero;
  if ([amountTextField doubleValue] > 0) {
    amountGreaterThanZero = YES;
  } else {
    amountGreaterThanZero = NO;
  }

  if (![self textFieldIsEmpty:nameTextField] &&
      ![self textFieldIsEmpty:addressTextField] &&
      ![self textFieldIsEmpty:cityTextField] &&
      ![self textFieldIsEmpty:stateTextField] &&
      ![self textFieldIsEmpty:zipTextField] &&
      ![self textFieldIsEmpty:phoneTextField] &&
      ![self textFieldIsEmpty:cookTextField] &&
      amountGreaterThanZero) {
    [printButton setEnabled:YES];
  } else {
    [printButton setEnabled:NO];
  }  
}


//******************************************************************************
// handlers
//******************************************************************************

- (void) textDidChange:(NSNotification *)note {
  if ([[self window] isKeyWindow]) {
    [self enablePrintButtonAppropriately];
  }
}

//******************************************************************************
// accessors and setters
//******************************************************************************

- (Person *)person {
  return person;
}
- (void) setPerson:(Person *)arg {
  [arg retain];
  [person release];
  person = arg;
}
- (Donation *)donation {
  return donation;
}
- (void) setDonation:(Donation *)arg {
  [arg retain];
  [donation release];
  donation = arg;
}
- (PeopleController *)peopleController {
  return peopleController;
}
- (void) setPeopleController:(PeopleController *)arg {
  [arg retain];
  [peopleController release];
  peopleController = arg;
}
- (double)donationAmount {
  return donationAmount;
}
- (void) setDonationAmount:(double)arg {
  donationAmount = arg;
}
- (bool)runningFromPayInvoice {
  return runningFromPayInvoice;
}
- (void) setRunningFromPayInvoice:(bool)arg {
  if (arg == YES) {
    [self setRunningFromAppController:NO];
    [self setRunningFromCashDonationManager:NO];
  }
  runningFromPayInvoice = arg;
}
- (bool)runningFromAppController {
  return runningFromAppController;
}
- (void) setRunningFromAppController:(bool)arg {
  if (arg == YES) {
    [self setRunningFromPayInvoice:NO];
    [self setRunningFromCashDonationManager:NO];
  }
  runningFromAppController = arg;
}
- (bool)runningFromCashDonationManager {
  return runningFromCashDonationManager;
}
- (void) setRunningFromCashDonationManager:(bool)arg {
  if (arg == YES) {
    [self setRunningFromPayInvoice:NO];
    [self setRunningFromAppController:NO];
  }
  runningFromCashDonationManager = arg;
}

//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
     NSNotificationCenter *nc;
     nc = [NSNotificationCenter defaultCenter];

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSControlTextDidChangeNotification
    object:nameTextField];

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSControlTextDidChangeNotification
    object:addressTextField];

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSControlTextDidChangeNotification
    object:cityTextField];

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSControlTextDidChangeNotification
    object:stateTextField];

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSControlTextDidChangeNotification
    object:zipTextField];

    [nc addObserver:self
    selector:@selector(textDidChange:)
    name:NSControlTextDidChangeNotification
    object:phoneTextField];

}
@end