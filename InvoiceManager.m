// 
// InvoiceManager.m
// Generated by auto-coder 1.0
// copyright 2007 The Little Joy.  All rights reserved
#import "InvoiceManager.h"
#import "Invoices.h"
#import "Person.h"
#import "People.h"
#import "Donation.h"
#import "Donations.h"
#import "Membership.h"
#import "Memberships.h"
#import "Products.h"
#import "Invoice.h"


@implementation InvoiceManager

- (id) init {
  self = [super init];
  if (self != nil) {
    [self setRunningModal:NO];
    self = [super initWithWindowNibName:@"InvoiceManager"];
    previousLengthOfInvoicesSearchString = 0;
  }
  return self;
}

//******************************************************************************
// dealloc
//******************************************************************************

- (void) dealloc {
  [invoiceViewer release];
  [invoicesArray release];
  [super dealloc];
}

//******************************************************************************
// windowing
//******************************************************************************

- (void)windowDidLoad {
   [super windowDidLoad];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForModal {
   [super setupForModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)setupForNonModal {
   [super setupForNonModal];
   [self setupButtons];
   [self setupTextFields];
   [self setupTables];
   [self setupStateVariables];
}

//******************************************************************************

- (void)runModalWithParent:(NSWindow *) parent {
   [super runModalWithParent:parent];
}


//******************************************************************************
// setup
//******************************************************************************

- (void)setupButtons {
  // no work to be done
}

//******************************************************************************

- (void)setupTextFields {
  [self clearTextField:invoicesSearchField];
}

//******************************************************************************

- (void)setupTables {
  [self setInvoicesArray:[[Invoices sharedInstance] arrayForDictionary]];
  [invoicesTableView setTarget:self];
  [invoicesTableView setDoubleAction:@selector(handleInvoicesClicked:)];
}

//******************************************************************************

- (void)setupStateVariables {
  // no op
}


//******************************************************************************
// button actions
//******************************************************************************


//******************************************************************************

- (IBAction)closeButtonClicked:(id)sender {
  //NSLog(@"closeButton clicked");
  if (runningModal) {
    [self stopModalAndCloseWindow];
  } else {
    [[self window] close];
  }
}

//******************************************************************************
// misc
//******************************************************************************



//******************************************************************************
// handlers
//******************************************************************************

- (void) handleInvoicesSearchFieldChange:(NSNotification *)note {
  if ([[self window] isKeyWindow] && [note object] == invoicesSearchField) {
    NSString *searchString = [[[note object] stringValue] lowercaseString];
    //NSString *nameString, *dateString, *paidString, *productName, *productCode, 
    //*productDescription;
    //NSArray *productsArray;
    NSString *invoiceDescription;
    id object;
    // revert to whole list of objects
    if ( [searchString length] == 0 ) {
      [self setInvoicesArray:[[Invoices sharedInstance] arrayForDictionary]];
      previousLengthOfInvoicesSearchString = 0;
      [invoicesTableView reloadData];
      return;
    }
    
    // this will hold our filtered list
    NSMutableArray *filteredObjects = [[NSMutableArray alloc] init];
    // if we back up, research the entire list
    if (previousLengthOfInvoicesSearchString > [searchString length]) {
      [self setInvoicesArray:[[Invoices sharedInstance] arrayForDictionary]];
    }
    
    // this needs to be exactly here, otherwise we won't iterate over the correct
    // set of objects
//    NSEnumerator *e = [invoicesArray objectEnumerator];
//    while (object = [e nextObject] ) {
//      nameString = [[object personName] lowercaseString];
//      NSRange nameRange = [nameString rangeOfString:searchString options:NSLiteralSearch];
//      dateString = [[[object date]  descriptionWithCalendarFormat:@"%m/%d/%Y"] lowercaseString];
//      NSRange dateRange = [dateString rangeOfString:searchString options:NSLiteralSearch];
//      paidString = [[object paidYesOrNo] lowercaseString];
//      NSRange paidRange = [paidString rangeOfString:searchString options:NSLiteralSearch];
//      if (((nameRange.length) > 0) || ((dateRange.length) > 0) || ((paidRange.length) > 0)) {
//        [filteredObjects addObject:object];
//      }
    NSEnumerator *e = [invoicesArray objectEnumerator];
    while (object = [e nextObject] ) {
      invoiceDescription = [object searchDescription];
      NSRange range = [invoiceDescription rangeOfString:searchString options:NSLiteralSearch];
      if (range.length > 0) {
        [filteredObjects addObject:object];
      }
    }
    [self setInvoicesArray:filteredObjects];
    [invoicesTableView reloadData];
    previousLengthOfInvoicesSearchString = [searchString length];
    [filteredObjects release];
  }
}

- (void)handleInvoicesChange:(NSNotification *)note {
  NSArray *tmp = [[Invoices sharedInstance] arrayForDictionary];
  [self setInvoicesArray:tmp];
  [invoicesTableView reloadData];
}

//******************************************************************************

- (void)handleInvoicesClicked:(id)sender {
  NSArray *selected = [invoicesArrayController selectedObjects];
  if ([selected count] > 0) {
    Invoice *tmp = (Invoice *)[selected objectAtIndex:0];
    if (tmp != nil) {
      if (invoiceViewer == nil) {
        ViewInvoice *iv = [[ViewInvoice alloc] init];
        [self setInvoiceViewer:iv];
        [iv release];
      }
      [invoiceViewer setInvoice:tmp];
      [invoiceViewer setupForModal];
      [invoiceViewer runModalWithParent:[self window]];
      
    }
  } 

}

//******************************************************************************
// accessors and setters
//******************************************************************************

- (ViewInvoice *)invoiceViewer {
  return invoiceViewer;
}
- (void) setInvoiceViewer:(ViewInvoice *)arg {
  [arg retain];
  [invoiceViewer release];
  invoiceViewer = arg;
}
- (NSMutableArray *)invoicesArray {
  return invoicesArray;
}
- (void) setInvoicesArray:(NSArray *)arg {
  if (arg != invoicesArray) {
    [invoicesArray release];
    invoicesArray = [arg mutableCopy];
  }
}



//******************************************************************************
// notifications
//******************************************************************************

- (void)setupNotificationObservers {
     NSNotificationCenter *nc;
     nc = [NSNotificationCenter defaultCenter];

    [nc addObserver:self
    selector:@selector(handleInvoicesSearchFieldChange:)
    name:NSControlTextDidChangeNotification
    object:invoicesSearchField];

    [nc addObserver:self
    selector:@selector(handleInvoicesChange:)
    name:[[Invoices sharedInstance] notificationChangeString]
    object:nil];

}
@end